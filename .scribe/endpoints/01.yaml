name: 'Customer Management / Customers'
description: |-

  APIs for managing customers, including creation, updates, search, and customer relationship management.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/customers/list
    metadata:
      groupName: 'Customer Management / Customers'
      groupDescription: |-

        APIs for managing customers, including creation, updates, search, and customer relationship management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a listing of customers with advanced search and filtering.'
      description: 'Supports pagination, sorting, and comprehensive search across multiple fields.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: |-
          {
              "message": "The route api/v1/customers/list could not be found."
          }
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/customers/create
    metadata:
      groupName: 'Customer Management / Customers'
      groupDescription: |-

        APIs for managing customers, including creation, updates, search, and customer relationship management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a newly created customer in storage.'
      description: 'Creates a new customer with comprehensive validation and audit trail.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      company_id:
        name: company_id
        description: 'The <code>id</code> of an existing record in the companies table.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      branch_id:
        name: branch_id
        description: ''
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      currency_id:
        name: currency_id
        description: 'The <code>id</code> of an existing record in the currencies table.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      employee_id:
        name: employee_id
        description: 'The <code>id</code> of an existing record in the users table.'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      country_id:
        name: country_id
        description: 'The <code>id</code> of an existing record in the countries table.'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      region_id:
        name: region_id
        description: 'The <code>id</code> of an existing record in the regions table.'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      city_id:
        name: city_id
        description: 'The <code>id</code> of an existing record in the cities table.'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      first_name:
        name: first_name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: mqeopfuudtdsufvyvddqa
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      second_name:
        name: second_name
        description: 'Must not be greater than 255 characters.'
        required: false
        example: mniihfqcoynlazghdtqtq
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      contact_name:
        name: contact_name
        description: 'Must not be greater than 255 characters.'
        required: false
        example: xbajwbpilpmufinllwloa
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: false
        example: dwill@example.org
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      phone:
        name: phone
        description: 'Must not be greater than 50 characters.'
        required: false
        example: smsjuryvojcybzvrbyick
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      mobile:
        name: mobile
        description: 'Must not be greater than 50 characters.'
        required: false
        example: znkygloigmkwxphlvazjr
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      address_one:
        name: address_one
        description: 'Must not be greater than 255 characters.'
        required: false
        example: cnfbaqywuxhgjjmzuxjub
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      address_two:
        name: address_two
        description: 'Must not be greater than 255 characters.'
        required: false
        example: qouzswiwxtrkimfcatbxs
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      postal_code:
        name: postal_code
        description: 'Must not be greater than 20 characters.'
        required: false
        example: pzmrazsroyjpxmqes
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      tax_number:
        name: tax_number
        description: 'Must not be greater than 100 characters.'
        required: false
        example: edyghenqcopwvownkbaml
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      notes:
        name: notes
        description: ''
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      status:
        name: status
        description: ''
        required: true
        example: active
        type: string
        enumValues:
          - active
          - inactive
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      company_id: 17
      currency_id: 17
      employee_id: 17
      country_id: 17
      region_id: 17
      city_id: 17
      first_name: mqeopfuudtdsufvyvddqa
      second_name: mniihfqcoynlazghdtqtq
      contact_name: xbajwbpilpmufinllwloa
      email: dwill@example.org
      phone: smsjuryvojcybzvrbyick
      mobile: znkygloigmkwxphlvazjr
      address_one: cnfbaqywuxhgjjmzuxjub
      address_two: qouzswiwxtrkimfcatbxs
      postal_code: pzmrazsroyjpxmqes
      tax_number: edyghenqcopwvownkbaml
      notes: consequatur
      status: active
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/customers/details/{id}'
    metadata:
      groupName: 'Customer Management / Customers'
      groupDescription: |-

        APIs for managing customers, including creation, updates, search, and customer relationship management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the specified customer with all related data.'
      description: 'Returns customer details with relationships loaded for comprehensive view.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the detail.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: |-
          {
              "message": "The route api/v1/customers/details/consequatur could not be found."
          }
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/customers/delete/{id}'
    metadata:
      groupName: 'Customer Management / Customers'
      groupDescription: |-

        APIs for managing customers, including creation, updates, search, and customer relationship management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Remove the specified customer from storage (soft delete).'
      description: 'Performs soft delete with audit trail tracking who deleted the customer.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the delete.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/v1/customers/{id}/restore'
    metadata:
      groupName: 'Customer Management / Customers'
      groupDescription: |-

        APIs for managing customers, including creation, updates, search, and customer relationship management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore a soft-deleted customer.'
      description: 'Restores a previously deleted customer and returns updated resource.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the customer.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      id: consequatur
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/v1/customers/bulk/delete
    metadata:
      groupName: 'Customer Management / Customers'
      groupDescription: |-

        APIs for managing customers, including creation, updates, search, and customer relationship management.
      subgroup: ''
      subgroupDescription: ''
      title: 'Bulk delete multiple customers.'
      description: 'Performs soft delete on multiple customers with audit trail.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
