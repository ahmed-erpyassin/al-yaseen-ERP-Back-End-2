openapi: 3.0.3
info:
  title: 'Al-Yaseen ERP API Documentation'
  description: 'API documentation for Al-Yaseen ERP Project Management and Inventory Management modules.'
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
tags:
  -
    name: Endpoints
    description: ''
  -
    name: 'Inventory Management / BOM Items'
    description: "\nAPIs for managing Bill of Materials (BOM) items, including component relationships and requirements calculation."
  -
    name: 'Inventory Management / Barcode Types'
    description: "\nAPIs for managing barcode types, validation, and barcode generation."
  -
    name: 'Inventory Management / Department Warehouses'
    description: "\nAPIs for managing department-warehouse relationships and access control."
  -
    name: 'Inventory Management / Inventory Items'
    description: "\nAPIs for managing inventory items, stock levels, and warehouse operations."
  -
    name: 'Inventory Management / Inventory Movements'
    description: "\nAPIs for managing inventory movements, including warehouse transfers, adjustments, and movement tracking."
  -
    name: 'Inventory Management / Item Types'
    description: "\nAPIs for managing item types, categories, and item classification."
  -
    name: 'Inventory Management / Item Units'
    description: "\nAPIs for managing item unit relationships, conversions, and unit-specific operations."
  -
    name: 'Inventory Management / Items'
    description: "\nAPIs for managing inventory items, including creation, updates, search, and transaction tracking."
  -
    name: 'Inventory Management / ManufacturingFormula'
    description: "\_*\n\_*\n\_"
  -
    name: 'Inventory Management / Stock Movements'
    description: "\nAPIs for managing stock movements, including transfers, adjustments, and movement tracking."
  -
    name: 'Inventory Management / Units'
    description: "\nAPIs for managing units of measure, including creation, updates, and unit conversions."
  -
    name: 'Inventory Management / Warehouses'
    description: "\nAPIs for managing warehouses, including creation, updates, search, and warehouse operations."
  -
    name: 'Project Management / Documents'
    description: "\nAPIs for managing project documents, including upload, download, categorization, and document lifecycle management."
  -
    name: 'Project Management / Financials'
    description: "\nAPIs for managing project financials, including budget tracking, expenses, revenue, and financial reporting."
  -
    name: 'Project Management / Milestones'
    description: "\nAPIs for managing project milestones, including creation, updates, tracking, and milestone lifecycle management."
  -
    name: 'Project Management / Projects'
    description: "\nAPIs for managing projects, including creation, updates, search, and project lifecycle management."
  -
    name: 'Project Management / Resources'
    description: "\nAPIs for managing project resources, including supplier allocation, resource tracking, and allocation calculations."
  -
    name: 'Project Management / Risks'
    description: "\nAPIs for managing project risks, including risk assessment, mitigation strategies, and risk monitoring."
  -
    name: 'Project Management / Tasks'
    description: "\nAPIs for managing project tasks, including creation, updates, assignments, and task lifecycle management."
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
paths:
  /api/v1/auth/register:
    post:
      summary: ''
      operationId: postApiV1AuthRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                second_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: andreanne00@example.org
                  nullable: false
                phone:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                phone_country_code:
                  type: string
                  description: 'Must not be greater than 5 characters.'
                  example: mqeop
                  nullable: true
                password:
                  type: string
                  description: ''
                  example: 'O[2UZ5ij-e/dl4m{o,'
                  nullable: false
              required:
                - first_name
                - second_name
                - email
                - password
  /api/v1/auth/login:
    post:
      summary: ''
      operationId: postApiV1AuthLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: qkunze@example.com
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: 'O[2UZ5ij-e/dl4m{o,'
                  nullable: false
              required:
                - email
                - password
  /api/v1/auth/send-otp:
    post:
      summary: ''
      operationId: postApiV1AuthSendOtp
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: 'The <code>phone</code> of an existing record in the users table.'
                  example: consequatur
                  nullable: false
              required:
                - phone
  /api/v1/auth/verify-otp:
    post:
      summary: ''
      operationId: postApiV1AuthVerifyOtp
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  description: 'The <code>phone</code> of an existing record in the users table.'
                  example: consequatur
                  nullable: false
                otp:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - phone
                - otp
  /api/v1/auth/me:
    get:
      summary: ''
      operationId: getApiV1AuthMe
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/auth/me could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/auth/me could not be found.'
      tags:
        - Endpoints
  /api/v1/auth/logout:
    post:
      summary: ''
      operationId: postApiV1AuthLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
  /api/v1/bom-items/list-components:
    get:
      summary: '✅ Display a listing of BOM items with enhanced search and filtering.'
      operationId: DisplayAListingOfBOMItemsWithEnhancedSearchAndFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/list-components could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/list-components could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
  /api/v1/bom-items/create-component:
    post:
      summary: '✅ Store a newly created BOM item with all Manufacturing Formula fields.'
      operationId: StoreANewlyCreatedBOMItemWithAllManufacturingFormulaFields
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                component_id:
                  type: string
                  description: 'The value and <code>item_id</code> must be different. The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.000001.'
                  example: 45
                  nullable: false
              required:
                - item_id
                - component_id
                - unit_id
                - quantity
  '/api/v1/bom-items/view-component/{id}':
    get:
      summary: 'Display the specified BOM item.'
      operationId: displayTheSpecifiedBOMItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/view-component/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/view-component/consequatur could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the view component.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/bom-items/update-component/{id}':
    put:
      summary: 'Update the specified BOM item.'
      operationId: updateTheSpecifiedBOMItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                component_id:
                  type: string
                  description: 'The value and <code>item_id</code> must be different. The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.000001.'
                  example: 45
                  nullable: false
              required:
                - item_id
                - component_id
                - unit_id
                - quantity
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the update component.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/bom-items/delete-component/{id}':
    delete:
      summary: 'Remove the specified BOM item (soft delete).'
      operationId: removeTheSpecifiedBOMItemsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the delete component.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/bom-items/by-item/{itemId}':
    get:
      summary: 'Get BOM items for a specific item (Bill of Materials).'
      operationId: getBOMItemsForASpecificItemBillOfMaterials
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/by-item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/by-item/consequatur could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/bom-items/by-component/{componentId}':
    get:
      summary: 'Get items that use a specific component.'
      operationId: getItemsThatUseASpecificComponent
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/by-component/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/by-component/consequatur could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: componentId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/bom-items/compute-requirements:
    post:
      summary: 'Calculate material requirements for production.'
      operationId: calculateMaterialRequirementsForProduction
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                production_quantity:
                  type: number
                  description: 'Must be at least 0.01.'
                  example: 45
                  nullable: false
              required:
                - item_id
                - production_quantity
  /api/v1/bom-items/filter-by-criteria:
    get:
      summary: '! Filter BOM items by field value.'
      operationId: FilterBOMItemsByFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/filter-by-criteria could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/filter-by-criteria could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
  /api/v1/bom-items/first-component:
    get:
      summary: '! Get first BOM item.'
      operationId: GetFirstBOMItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/first-component could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/first-component could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
  /api/v1/bom-items/last-component:
    get:
      summary: '! Get last BOM item.'
      operationId: GetLastBOMItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/last-component could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/last-component could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
  /api/v1/bom-items/deleted-bom-items:
    get:
      summary: 'Get trashed (soft deleted) BOM items.'
      operationId: getTrashedsoftDeletedBOMItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/deleted-bom-items could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/deleted-bom-items could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
  '/api/v1/bom-items/{id}/restore-bom-item':
    post:
      summary: 'Restore a soft deleted BOM item.'
      operationId: restoreASoftDeletedBOMItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the bom item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/bom-items/{id}/permanently-delete':
    delete:
      summary: 'Permanently delete a BOM item (force delete).'
      operationId: permanentlyDeleteABOMItemforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the bom item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/barcode-types/enumerate-types:
    get:
      summary: 'Display a listing of barcode types.'
      operationId: displayAListingOfBarcodeTypes
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/enumerate-types could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/enumerate-types could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
  '/api/v1/barcode-types/view-type/{id}':
    get:
      summary: 'Display the specified barcode type.'
      operationId: displayTheSpecifiedBarcodeType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/view-type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/view-type/consequatur could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the view type.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/barcode-types/type-options:
    get:
      summary: 'Get barcode type options for dropdown.'
      operationId: getBarcodeTypeOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/type-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/type-options could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
  /api/v1/barcode-types/supported-formats:
    get:
      summary: 'Get supported barcode types from Milon library.'
      operationId: getSupportedBarcodeTypesFromMilonLibrary
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/supported-formats could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/supported-formats could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
  /api/v1/barcode-types/verify-barcode:
    post:
      summary: 'Validate a barcode against a specific type.'
      operationId: validateABarcodeAgainstASpecificType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Barcode Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the barcode_types table.'
                  example: consequatur
                  nullable: false
              required:
                - barcode
                - barcode_type_id
  /api/v1/barcode-types/create-barcode:
    post:
      summary: 'Generate barcode image (PNG or SVG).'
      operationId: generateBarcodeImagePNGOrSVG
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Barcode Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the barcode_types table.'
                  example: consequatur
                  nullable: false
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 5
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 16
                  nullable: true
                format:
                  type: string
                  description: ''
                  example: svg
                  nullable: true
                  enum:
                    - png
                    - svg
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
              required:
                - barcode
                - barcode_type_id
  /api/v1/barcode-types/create-barcode-svg:
    post:
      summary: 'Generate SVG barcode specifically.'
      operationId: generateSVGBarcodeSpecifically
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Barcode Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the barcode_types table.'
                  example: consequatur
                  nullable: false
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 5
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 16
                  nullable: true
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
              required:
                - barcode
                - barcode_type_id
  /api/v1/department-warehouses/enumerate-all:
    get:
      summary: 'Display a listing of department warehouses.'
      operationId: displayAListingOfDepartmentWarehouses
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/enumerate-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/enumerate-all could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
  /api/v1/department-warehouses/create-assignment:
    post:
      summary: 'Store a newly created department warehouse.'
      operationId: storeANewlyCreatedDepartmentWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Department Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                department_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                department_name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                department_name_en:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                manager_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dtdsufvyvddqamniihfqc
                  nullable: true
                manager_phone:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: oynlazghdtqtqxbajwbpi
                  nullable: true
                manager_email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: jaunita.schamberger@example.com
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - department_number
                - department_name_ar
  '/api/v1/department-warehouses/view-assignment/{id}':
    get:
      summary: 'Display the specified department warehouse.'
      operationId: displayTheSpecifiedDepartmentWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/view-assignment/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/view-assignment/consequatur could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the view assignment.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/department-warehouses/update-assignment/{id}':
    put:
      summary: 'Update the specified department warehouse.'
      operationId: updateTheSpecifiedDepartmentWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Department Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                department_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                department_name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                department_name_en:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                manager_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dtdsufvyvddqamniihfqc
                  nullable: true
                manager_phone:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: oynlazghdtqtqxbajwbpi
                  nullable: true
                manager_email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: jaunita.schamberger@example.com
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - department_number
                - department_name_ar
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the update assignment.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/department-warehouses/remove-assignment/{id}':
    delete:
      summary: 'Remove the specified department warehouse.'
      operationId: removeTheSpecifiedDepartmentWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Department Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the remove assignment.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/department-warehouses/primary-assignment:
    get:
      summary: 'Get the first department warehouse.'
      operationId: getTheFirstDepartmentWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/primary-assignment could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/primary-assignment could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
  /api/v1/department-warehouses/ultimate-assignment:
    get:
      summary: 'Get the last department warehouse.'
      operationId: getTheLastDepartmentWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/ultimate-assignment could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/ultimate-assignment could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
  /api/v1/inventory-items/survey-all:
    get:
      summary: 'List Inventory Items'
      operationId: listInventoryItems
      description: 'Retrieve a paginated list of inventory items with filtering and search capabilities.'
      parameters:
        -
          in: query
          name: active
          description: 'Filter by active status.'
          example: true
          required: false
          schema:
            type: boolean
            description: 'Filter by active status.'
            example: true
            nullable: false
        -
          in: query
          name: category_id
          description: 'Filter by category ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by category ID.'
            example: 1
            nullable: false
        -
          in: query
          name: supplier_id
          description: 'Filter by supplier ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by supplier ID.'
            example: 1
            nullable: false
        -
          in: query
          name: search
          description: 'Search across item names and descriptions.'
          example: laptop
          required: false
          schema:
            type: string
            description: 'Search across item names and descriptions.'
            example: laptop
            nullable: false
        -
          in: query
          name: sort_by
          description: 'Field to sort by.'
          example: name
          required: false
          schema:
            type: string
            description: 'Field to sort by.'
            example: name
            nullable: false
        -
          in: query
          name: sort_direction
          description: 'Sort direction (asc/desc).'
          example: asc
          required: false
          schema:
            type: string
            description: 'Sort direction (asc/desc).'
            example: asc
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (default: 15).'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Number of items per page (default: 15).'
            example: 20
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  data:
                    -
                      id: 1
                      name: 'Laptop Dell XPS 13'
                      sku: DELL-XPS-13
                      category: Electronics
                      quantity: 50
                      unit_price: 1200.0
                      supplier: 'Dell Inc.'
                      active: true
                      created_at: '2024-01-01T00:00:00.000000Z'
                  message: 'Inventory items retrieved successfully'
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Laptop Dell XPS 13'
                        sku: DELL-XPS-13
                        category: Electronics
                        quantity: 50
                        unit_price: 1200
                        supplier: 'Dell Inc.'
                        active: true
                        created_at: '2024-01-01T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Laptop Dell XPS 13'
                        sku:
                          type: string
                          example: DELL-XPS-13
                        category:
                          type: string
                          example: Electronics
                        quantity:
                          type: integer
                          example: 50
                        unit_price:
                          type: number
                          example: 1200.0
                        supplier:
                          type: string
                          example: 'Dell Inc.'
                        active:
                          type: boolean
                          example: true
                        created_at:
                          type: string
                          example: '2024-01-01T00:00:00.000000Z'
                  message:
                    type: string
                    example: 'Inventory items retrieved successfully'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Error retrieving inventory items: Database connection failed'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Error retrieving inventory items: Database connection failed'
      tags:
        - 'Inventory Management / Inventory Items'
  /api/v1/inventory-items/register-inventory:
    post:
      summary: 'Store a newly created inventory item.'
      operationId: storeANewlyCreatedInventoryItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: consequatur
                  nullable: false
                item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                item_name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                item_name_en:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                barcode:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                model:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                unit:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: azjrcnfbaqywuxhgjjmzu
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 82
                  nullable: true
                unit_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 34
                  nullable: true
                minimum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 71
                  nullable: true
                reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 4
                  nullable: true
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - company_id
                - item_number
                - item_name_ar
                - unit
  '/api/v1/inventory-items/examine-inventory/{id}':
    get:
      summary: 'Display the specified inventory item.'
      operationId: displayTheSpecifiedInventoryItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/examine-inventory/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/examine-inventory/consequatur could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the examine inventory.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-items/modify-inventory/{id}':
    put:
      summary: 'Update the specified inventory item.'
      operationId: updateTheSpecifiedInventoryItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: consequatur
                  nullable: false
                item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                item_name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                item_name_en:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                barcode:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                model:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                unit:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: azjrcnfbaqywuxhgjjmzu
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 82
                  nullable: true
                unit_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 34
                  nullable: true
                minimum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 71
                  nullable: true
                reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 4
                  nullable: true
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
              required:
                - company_id
                - item_number
                - item_name_ar
                - unit
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the modify inventory.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-items/remove-inventory/{id}':
    delete:
      summary: 'Remove the specified inventory item.'
      operationId: removeTheSpecifiedInventoryItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the remove inventory.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/inventory-items/first-inventory:
    get:
      summary: '! Get first inventory item.'
      operationId: GetFirstInventoryItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/first-inventory could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/first-inventory could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
  /api/v1/inventory-items/last-inventory:
    get:
      summary: '! Get last inventory item.'
      operationId: GetLastInventoryItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/last-inventory could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/last-inventory could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
  /api/v1/inventory-items/low-stock-items:
    get:
      summary: '! Get low stock items.'
      operationId: GetLowStockItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/low-stock-items could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/low-stock-items could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
  /api/v1/inventory-items/reorder-required-items:
    get:
      summary: '! Get items that need reordering.'
      operationId: GetItemsThatNeedReordering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/reorder-required-items could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/reorder-required-items could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
  /api/v1/inventory-items/deleted-inventory:
    get:
      summary: 'Get trashed (soft deleted) inventory items.'
      operationId: getTrashedsoftDeletedInventoryItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/deleted-inventory could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/deleted-inventory could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
  '/api/v1/inventory-items/{id}/restore-inventory':
    post:
      summary: 'Restore a soft deleted inventory item.'
      operationId: restoreASoftDeletedInventoryItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-items/{id}/permanently-delete':
    delete:
      summary: 'Permanently delete an inventory item (force delete).'
      operationId: permanentlyDeleteAnInventoryItemforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/inventory-movements/monitor-all:
    get:
      summary: '✅ Display a listing of inventory movements.'
      operationId: DisplayAListingOfInventoryMovements
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/monitor-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/monitor-all could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/initiate-movement:
    post:
      summary: '✅ Store a newly created inventory movement (Add Warehouse Movement).'
      operationId: StoreANewlyCreatedInventoryMovementAddWarehouseMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movement_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: true
                movement_type:
                  type: string
                  description: ''
                  example: inbound
                  nullable: false
                  enum:
                    - outbound
                    - inbound
                    - transfer
                    - manufacturing
                    - inventory_count
                movement_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:25'
                  nullable: true
                movement_time:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '13:42:25'
                  nullable: true
                vendor_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                customer_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                vendor_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                customer_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                movement_description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                inbound_invoice_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                outbound_invoice_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                inbound_invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                outbound_invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                user_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                shipment_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                reference:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: azjrcnfbaqywuxhgjjmzu
                  nullable: true
                warehouse_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: draft
                  nullable: true
                  enum:
                    - draft
                    - confirmed
                    - cancelled
                movement_data:
                  type: array
                  description: 'Must have at least 1 items.'
                  example:
                    - []
                  items:
                    type: object
                    properties:
                      item_id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: false
                      unit_id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: true
                      quantity:
                        type: number
                        description: 'Must be at least 0.0001.'
                        example: 45
                        nullable: false
                      unit_cost:
                        type: number
                        description: 'Must be at least 0.'
                        example: 56
                        nullable: true
                      unit_price:
                        type: number
                        description: 'Must be at least 0.'
                        example: 16
                        nullable: true
                      inventory_count:
                        type: number
                        description: 'Must be at least 0.'
                        example: 50
                        nullable: true
                      notes:
                        type: string
                        description: 'Must not be greater than 500 characters.'
                        example: pfuudtdsufvyvddqamnii
                        nullable: true
                      batch_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: hfqcoynlazghdtqtqxbaj
                        nullable: true
                      expiry_date:
                        type: string
                        description: 'Must be a valid date.'
                        example: '2025-09-25T13:42:25'
                        nullable: true
                      serial_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: wbpilpmufinllwloauydl
                        nullable: true
                      location_code:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: smsjuryvojcybzvrbyick
                        nullable: true
                      shelf_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: znkygloigmkwxphlvazjr
                        nullable: true
                      bin_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: cnfbaqywuxhgjjmzuxjub
                        nullable: true
                    required:
                      - item_id
                      - quantity
              required:
                - movement_type
                - warehouse_id
                - movement_data
  '/api/v1/inventory-movements/review-movement/{id}':
    get:
      summary: '✅ Display the specified inventory movement.'
      operationId: DisplayTheSpecifiedInventoryMovement
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/review-movement/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/review-movement/consequatur could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the review movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/adjust-movement/{id}':
    put:
      summary: '✅ Update the specified inventory movement.'
      operationId: UpdateTheSpecifiedInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movement_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: true
                movement_type:
                  type: string
                  description: ''
                  example: inventory_count
                  nullable: false
                  enum:
                    - outbound
                    - inbound
                    - transfer
                    - manufacturing
                    - inventory_count
                movement_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:25'
                  nullable: true
                movement_time:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '13:42:25'
                  nullable: true
                vendor_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                customer_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                vendor_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                customer_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                movement_description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                inbound_invoice_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                outbound_invoice_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                inbound_invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                outbound_invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                user_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                shipment_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                reference:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: azjrcnfbaqywuxhgjjmzu
                  nullable: true
                warehouse_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: confirmed
                  nullable: true
                  enum:
                    - draft
                    - confirmed
                    - cancelled
                movement_data:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: true
                      item_id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: false
                      unit_id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: true
                      quantity:
                        type: number
                        description: 'Must be at least 0.0001.'
                        example: 45
                        nullable: false
                      unit_cost:
                        type: number
                        description: 'Must be at least 0.'
                        example: 56
                        nullable: true
                      unit_price:
                        type: number
                        description: 'Must be at least 0.'
                        example: 16
                        nullable: true
                      inventory_count:
                        type: number
                        description: 'Must be at least 0.'
                        example: 50
                        nullable: true
                      notes:
                        type: string
                        description: 'Must not be greater than 500 characters.'
                        example: pfuudtdsufvyvddqamnii
                        nullable: true
                      batch_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: hfqcoynlazghdtqtqxbaj
                        nullable: true
                      expiry_date:
                        type: string
                        description: 'Must be a valid date.'
                        example: '2025-09-25T13:42:25'
                        nullable: true
                      serial_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: wbpilpmufinllwloauydl
                        nullable: true
                      location_code:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: smsjuryvojcybzvrbyick
                        nullable: true
                      shelf_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: znkygloigmkwxphlvazjr
                        nullable: true
                      bin_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: cnfbaqywuxhgjjmzuxjub
                        nullable: true
                      _delete:
                        type: boolean
                        description: ''
                        example: true
                        nullable: true
                    required:
                      - item_id
                      - quantity
              required:
                - movement_type
                - warehouse_id
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the adjust movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/cancel-movement/{id}':
    delete:
      summary: '✅ Remove the specified inventory movement (soft delete).'
      operationId: RemoveTheSpecifiedInventoryMovementsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the cancel movement.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/inventory-movements/setup-data:
    get:
      summary: '✅ Get form data for inventory movement.'
      operationId: GetFormDataForInventoryMovement
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/setup-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/setup-data could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/filter-by-criteria:
    get:
      summary: '✅ Filter inventory movements by specific field value (Selection-Driven Display).'
      operationId: FilterInventoryMovementsBySpecificFieldValueSelectionDrivenDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/filter-by-criteria could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/filter-by-criteria could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                field:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                value:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 13
                  nullable: true
                sort_by:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                sort_direction:
                  type: string
                  description: ''
                  example: desc
                  nullable: true
                  enum:
                    - asc
                    - desc
              required:
                - field
                - value
  /api/v1/inventory-movements/archived-movements:
    get:
      summary: '✅ Get trashed inventory movements (soft deleted).'
      operationId: GetTrashedInventoryMovementssoftDeleted
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/archived-movements could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/archived-movements could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/initial-movement:
    get:
      summary: '✅ Get first inventory movement (First/Last sorting).'
      operationId: GetFirstInventoryMovementFirstLastSorting
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/initial-movement could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/initial-movement could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/final-movement:
    get:
      summary: '✅ Get last inventory movement (First/Last sorting).'
      operationId: GetLastInventoryMovementFirstLastSorting
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/final-movement could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/final-movement could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/next-sequence-number:
    get:
      summary: '✅ Get next sequential movement number for preview.'
      operationId: GetNextSequentialMovementNumberForPreview
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/next-sequence-number could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/next-sequence-number could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                warehouse_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                movement_type:
                  type: string
                  description: ''
                  example: manufacturing
                  nullable: false
                  enum:
                    - outbound
                    - inbound
                    - transfer
                    - manufacturing
                    - inventory_count
              required:
                - warehouse_id
                - movement_type
  '/api/v1/inventory-movements/{id}/movement-details':
    get:
      summary: '✅ Get movement data with sorting (First/Last for movement data table).'
      operationId: GetMovementDataWithSortingFirstLastForMovementDataTable
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/consequatur/movement-details could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/consequatur/movement-details could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/validate-movement':
    post:
      summary: '✅ Confirm inventory movement.'
      operationId: ConfirmInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/replicate-movement':
    post:
      summary: '✅ Duplicate inventory movement with new date and time.'
      operationId: DuplicateInventoryMovementWithNewDateAndTime
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/reactivate-movement':
    post:
      summary: '✅ Restore a soft deleted inventory movement.'
      operationId: RestoreASoftDeletedInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/permanently-remove':
    delete:
      summary: '✅ Permanently delete an inventory movement.'
      operationId: PermanentlyDeleteAnInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/item-types/catalog-types:
    get:
      summary: 'Display a listing of item types.'
      operationId: displayAListingOfItemTypes
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-types/catalog-types could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-types/catalog-types could not be found.'
      tags:
        - 'Inventory Management / Item Types'
  /api/v1/item-types/establish-type:
    post:
      summary: 'Store a newly created item type.'
      operationId: storeANewlyCreatedItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                description_ar:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
              required:
                - name
  '/api/v1/item-types/examine-type/{id}':
    get:
      summary: 'Display the specified item type.'
      operationId: displayTheSpecifiedItemType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-types/examine-type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-types/examine-type/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Types'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the examine type.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-types/modify-type/{id}':
    put:
      summary: 'Update the specified item type.'
      operationId: updateTheSpecifiedItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                description_ar:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                is_active:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
              required:
                - name
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the modify type.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-types/eliminate-type/{id}':
    delete:
      summary: 'Remove the specified item type.'
      operationId: removeTheSpecifiedItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Types'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the eliminate type.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/item-types/type-selections:
    get:
      summary: 'Get item type options for dropdown.'
      operationId: getItemTypeOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-types/type-selections could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-types/type-selections could not be found.'
      tags:
        - 'Inventory Management / Item Types'
  /api/v1/item-units/list-all:
    get:
      summary: 'Display a listing of item units.'
      operationId: displayAListingOfItemUnits
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/list-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/list-all could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/establish-unit:
    post:
      summary: 'Store a newly created item unit.'
      operationId: storeANewlyCreatedItemUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                conversion_rate:
                  type: number
                  description: 'Must be at least 0.000001.'
                  example: 45
                  nullable: false
                is_default:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                unit_type:
                  type: string
                  description: ''
                  example: balance
                  nullable: false
                  enum:
                    - balance
                    - second
                    - third
                quantity_factor:
                  type: number
                  description: 'Must be at least 0.0001.'
                  example: 56
                  nullable: true
                balance_unit:
                  type: string
                  description: ''
                  example: kilo
                  nullable: false
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_balance_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: eopfuudtdsufvyvddqamn
                  nullable: true
                length:
                  type: number
                  description: 'Must be at least 0.'
                  example: 28
                  nullable: true
                width:
                  type: number
                  description: 'Must be at least 0.'
                  example: 30
                  nullable: true
                height:
                  type: number
                  description: 'Must be at least 0.'
                  example: 25
                  nullable: true
                second_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_second_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fqcoynlazghdtqtqxbajw
                  nullable: true
                second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bpilpmufinllwloauydls
                  nullable: true
                custom_second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: msjuryvojcybzvrbyickz
                  nullable: true
                second_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                second_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                third_unit:
                  type: string
                  description: ''
                  example: liter
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_third_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                custom_third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                third_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                third_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                default_handling_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                default_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                custom_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                unit_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                unit_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 46
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - item_id
                - unit_id
                - conversion_rate
                - unit_type
                - balance_unit
                - status
  '/api/v1/item-units/examine-unit/{id}':
    get:
      summary: 'Display the specified item unit.'
      operationId: displayTheSpecifiedItemUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/examine-unit/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/examine-unit/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the examine unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/adjust-unit/{id}':
    put:
      summary: 'Update the specified item unit.'
      operationId: updateTheSpecifiedItemUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                conversion_rate:
                  type: number
                  description: 'Must be at least 0.000001.'
                  example: 45
                  nullable: false
                is_default:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                unit_type:
                  type: string
                  description: ''
                  example: third
                  nullable: false
                  enum:
                    - balance
                    - second
                    - third
                quantity_factor:
                  type: number
                  description: 'Must be at least 0.0001.'
                  example: 56
                  nullable: true
                balance_unit:
                  type: string
                  description: ''
                  example: ton
                  nullable: false
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_balance_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: eopfuudtdsufvyvddqamn
                  nullable: true
                length:
                  type: number
                  description: 'Must be at least 0.'
                  example: 28
                  nullable: true
                width:
                  type: number
                  description: 'Must be at least 0.'
                  example: 30
                  nullable: true
                height:
                  type: number
                  description: 'Must be at least 0.'
                  example: 25
                  nullable: true
                second_unit:
                  type: string
                  description: ''
                  example: carton
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_second_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fqcoynlazghdtqtqxbajw
                  nullable: true
                second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bpilpmufinllwloauydls
                  nullable: true
                custom_second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: msjuryvojcybzvrbyickz
                  nullable: true
                second_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                second_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                third_unit:
                  type: string
                  description: ''
                  example: carton
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_third_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                custom_third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                third_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                third_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                default_handling_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                default_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                custom_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                unit_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                unit_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 46
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: active
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - item_id
                - unit_id
                - conversion_rate
                - unit_type
                - balance_unit
                - status
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the adjust unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/remove-unit/{id}':
    delete:
      summary: 'Remove the specified item unit (soft delete).'
      operationId: removeTheSpecifiedItemUnitsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the remove unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/item-units/type-selections:
    get:
      summary: 'Get unit type options.'
      operationId: getUnitTypeOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/type-selections could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/type-selections could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/container-selections:
    get:
      summary: 'Get contains options for item units.'
      operationId: getContainsOptionsForItemUnits
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/container-selections could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/container-selections could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/form-setup:
    get:
      summary: 'Get item unit form data.'
      operationId: getItemUnitFormData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/form-setup could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/form-setup could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/compute-conversion:
    post:
      summary: 'Calculate conversion between units.'
      operationId: calculateConversionBetweenUnits
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the item_units table.'
                  example: consequatur
                  nullable: false
                to_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the item_units table.'
                  example: consequatur
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: false
              required:
                - from_unit_id
                - to_unit_id
                - quantity
  '/api/v1/item-units/by-item/{itemId}':
    get:
      summary: 'Get item units for a specific item.'
      operationId: getItemUnitsForASpecificItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/by-item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/by-item/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/by-item-type/{itemId}/{type}':
    get:
      summary: 'Get item units by type.'
      operationId: getItemUnitsByType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/by-item-type/consequatur/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/by-item-type/consequatur/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: type
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/comprehensive-data/{itemId}':
    get:
      summary: 'Get comprehensive item unit data.'
      operationId: getComprehensiveItemUnitData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/comprehensive-data/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/comprehensive-data/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/{id}/designate-default':
    put:
      summary: 'Set default unit for an item.'
      operationId: setDefaultUnitForAnItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/item-units/deleted-item-units:
    get:
      summary: 'Get trashed (soft deleted) item units.'
      operationId: getTrashedsoftDeletedItemUnits
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/deleted-item-units could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/deleted-item-units could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  '/api/v1/item-units/{id}/restore-item-unit':
    post:
      summary: 'Restore a soft deleted item unit.'
      operationId: restoreASoftDeletedItemUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/{id}/permanently-delete':
    delete:
      summary: 'Permanently delete an item unit (force delete).'
      operationId: permanentlyDeleteAnItemUnitforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/inventory-all:
    get:
      summary: 'List Items'
      operationId: listItems
      description: 'Retrieve a paginated list of inventory items with comprehensive filtering options.'
      parameters:
        -
          in: query
          name: type
          description: 'Filter by item type.'
          example: product
          required: false
          schema:
            type: string
            description: 'Filter by item type.'
            example: product
            nullable: false
        -
          in: query
          name: branch_id
          description: 'Filter by branch ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by branch ID.'
            example: 1
            nullable: false
        -
          in: query
          name: unit_id
          description: 'Filter by unit ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by unit ID.'
            example: 1
            nullable: false
        -
          in: query
          name: parent_id
          description: 'Filter by parent item ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by parent item ID.'
            example: 1
            nullable: false
        -
          in: query
          name: stock_tracking
          description: 'Filter by stock tracking enabled.'
          example: true
          required: false
          schema:
            type: boolean
            description: 'Filter by stock tracking enabled.'
            example: true
            nullable: false
        -
          in: query
          name: search
          description: 'Search across item names and descriptions.'
          example: laptop
          required: false
          schema:
            type: string
            description: 'Search across item names and descriptions.'
            example: laptop
            nullable: false
        -
          in: query
          name: company_id
          description: 'Filter by company ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by company ID.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (default: 15).'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Number of items per page (default: 15).'
            example: 20
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  data:
                    -
                      id: 1
                      name: 'Laptop Dell XPS 13'
                      code: DELL-XPS-13
                      type: product
                      unit:
                        id: 1
                        name: Piece
                      stock_tracking: true
                      company:
                        id: 1
                        name: 'ABC Company'
                      created_at: '2024-01-01T00:00:00.000000Z'
                  message: 'Items retrieved successfully'
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'Laptop Dell XPS 13'
                        code: DELL-XPS-13
                        type: product
                        unit:
                          id: 1
                          name: Piece
                        stock_tracking: true
                        company:
                          id: 1
                          name: 'ABC Company'
                        created_at: '2024-01-01T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'Laptop Dell XPS 13'
                        code:
                          type: string
                          example: DELL-XPS-13
                        type:
                          type: string
                          example: product
                        unit:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Piece
                        stock_tracking:
                          type: boolean
                          example: true
                        company:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'ABC Company'
                        created_at:
                          type: string
                          example: '2024-01-01T00:00:00.000000Z'
                  message:
                    type: string
                    example: 'Items retrieved successfully'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Error retrieving items: Database connection failed'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Error retrieving items: Database connection failed'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/register-item:
    post:
      summary: 'Store a newly created item with all comprehensive data (Save functionality).'
      operationId: storeANewlyCreatedItemWithAllComprehensiveDataSaveFunctionality
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                parent_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: null
                  nullable: true
                item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                catalog_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: false
                name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                description_ar:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                model:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                type:
                  type: string
                  description: ''
                  example: material
                  nullable: false
                  enum:
                    - product
                    - service
                    - material
                    - raw_material
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                balance:
                  type: number
                  description: ''
                  example: 11613.31890586
                  nullable: true
                minimum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 50
                  nullable: true
                maximum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 55
                  nullable: true
                reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 19
                  nullable: true
                max_reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 70
                  nullable: true
                cost_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 70
                  nullable: true
                purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 12
                  nullable: true
                first_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 66
                  nullable: true
                second_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 13
                  nullable: true
                third_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 65
                  nullable: true
                purchase_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 20
                  nullable: true
                purchase_prices_include_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 18
                  nullable: true
                minimum_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 74
                  nullable: true
                first_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 87
                  nullable: true
                second_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 76
                  nullable: true
                third_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 10
                  nullable: true
                sale_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 3
                  nullable: true
                maximum_sale_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 17
                  nullable: true
                minimum_allowed_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 1
                  nullable: true
                sale_prices_include_vat:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                item_subject_to_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                barcode:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                barcode_type:
                  type: string
                  description: ''
                  example: EAN13
                  nullable: true
                  enum:
                    - C128
                    - EAN13
                    - C39
                    - UPCA
                    - ITF
                expiry_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>today</code>.'
                  example: '2106-10-25'
                  nullable: true
                image:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                color:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                item_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: false
                custom_item_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                custom_item_type_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                stock_tracking:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - unit_id
                - code
                - name
                - type
                - item_type
  '/api/v1/items/inspect-item/{id}':
    get:
      summary: 'Display the specified item with all available data.'
      operationId: displayTheSpecifiedItemWithAllAvailableData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/inspect-item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/inspect-item/consequatur could not be found.'
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inspect item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/modify-item/{id}':
    put:
      summary: 'Update the specified item.'
      operationId: updateTheSpecifiedItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                parent_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: null
                  nullable: true
                item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                catalog_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                model:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dtdsufvyvddqamniihfqc
                  nullable: true
                type:
                  type: string
                  description: ''
                  example: raw_material
                  nullable: false
                  enum:
                    - product
                    - service
                    - material
                    - raw_material
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 51
                  nullable: true
                balance:
                  type: number
                  description: ''
                  example: 11613.31890586
                  nullable: true
                minimum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 50
                  nullable: true
                maximum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 55
                  nullable: true
                reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 19
                  nullable: true
                max_reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 70
                  nullable: true
                first_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 70
                  nullable: true
                second_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 12
                  nullable: true
                third_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 66
                  nullable: true
                purchase_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 4
                  nullable: true
                purchase_prices_include_vat:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                first_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 65
                  nullable: true
                second_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 72
                  nullable: true
                third_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 18
                  nullable: true
                sale_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 21
                  nullable: true
                maximum_sale_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 24
                  nullable: true
                minimum_allowed_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 76
                  nullable: true
                sale_prices_include_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                item_subject_to_vat:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                barcode:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                barcode_type:
                  type: string
                  description: ''
                  example: UPCA
                  nullable: true
                  enum:
                    - C128
                    - EAN13
                    - C39
                    - UPCA
                    - ITF
                expiry_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>today</code>.'
                  example: '2106-10-25'
                  nullable: true
                image:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                color:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                item_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: false
                active:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                stock_tracking:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - unit_id
                - item_number
                - code
                - name
                - type
                - item_type
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the modify item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/discard-item/{id}':
    delete:
      summary: 'Remove the specified item (soft delete).'
      operationId: removeTheSpecifiedItemsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the discard item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/locate-items:
    get:
      summary: 'Search for items with advanced filtering.'
      operationId: searchForItemsWithAdvancedFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/locate-items could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/locate-items could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/available-fields:
    get:
      summary: 'Get available fields for dynamic selection.'
      operationId: getAvailableFieldsForDynamicSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/available-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/available-fields could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/sortable-columns:
    get:
      summary: 'Get sortable columns with their Arabic labels.'
      operationId: getSortableColumnsWithTheirArabicLabels
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/sortable-columns could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/sortable-columns could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/item-categories:
    get:
      summary: 'Get available categories/types for filtering.'
      operationId: getAvailableCategoriestypesForFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/item-categories could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/item-categories could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/storage-locations:
    get:
      summary: 'Get available warehouses for item creation.'
      operationId: getAvailableWarehousesForItemCreation
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/storage-locations could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/storage-locations could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/pricing-configuration:
    get:
      summary: 'Get pricing validation and form data.'
      operationId: getPricingValidationAndFormData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/pricing-configuration could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/pricing-configuration could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/validate-pricing-data:
    post:
      summary: 'Validate pricing data.'
      operationId: validatePricingData
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                proposed_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                proposed_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 16
                  nullable: true
              required:
                - item_id
  /api/v1/items/barcode-type-options:
    get:
      summary: 'Get barcode types for dropdown.'
      operationId: getBarcodeTypesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/barcode-type-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/barcode-type-options could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/item-type-options:
    get:
      summary: 'Get item types for dropdown.'
      operationId: getItemTypesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/item-type-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/item-type-options could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/create-custom-type:
    post:
      summary: 'Create custom item type.'
      operationId: createCustomItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
              required:
                - name
  /api/v1/items/validate-barcode-format:
    post:
      summary: 'Validate barcode format.'
      operationId: validateBarcodeFormat
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type:
                  type: string
                  description: ''
                  example: EAN13
                  nullable: false
                  enum:
                    - C128
                    - EAN13
                    - C39
                    - UPCA
                    - ITF
              required:
                - barcode
                - barcode_type
  '/api/v1/items/{item}/produce-barcode':
    post:
      summary: 'Generate barcode for item (PNG or SVG).'
      operationId: generateBarcodeForItemPNGOrSVG
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 9
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 13
                  nullable: true
                format:
                  type: string
                  description: ''
                  example: svg
                  nullable: true
                  enum:
                    - png
                    - svg
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{item}/produce-barcode-svg':
    post:
      summary: 'Generate SVG barcode for item specifically.'
      operationId: generateSVGBarcodeForItemSpecifically
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 9
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 13
                  nullable: true
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{item}/item-transactions':
    get:
      summary: 'Get all transactions/movements for a specific item.'
      operationId: getAllTransactionsmovementsForASpecificItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/consequatur/item-transactions could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/consequatur/item-transactions could not be found.'
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                date_from:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:23'
                  nullable: true
                date_to:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>date_from</code>.'
                  example: '2106-10-25'
                  nullable: true
                transaction_type:
                  type: string
                  description: ''
                  example: purchases
                  nullable: true
                  enum:
                    - sales
                    - purchases
                    - stock_movements
                    - all
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 13
                  nullable: true
                sort_by:
                  type: string
                  description: ''
                  example: amount
                  nullable: true
                  enum:
                    - date
                    - type
                    - quantity
                    - amount
                sort_direction:
                  type: string
                  description: ''
                  example: asc
                  nullable: true
                  enum:
                    - asc
                    - desc
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{item}/export-transactions':
    get:
      summary: 'Export item transactions to Excel.'
      operationId: exportItemTransactionsToExcel
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/consequatur/export-transactions could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/consequatur/export-transactions could not be found.'
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                date_from:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:23'
                  nullable: true
                date_to:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>date_from</code>.'
                  example: '2106-10-25'
                  nullable: true
                transaction_type:
                  type: string
                  description: ''
                  example: all
                  nullable: true
                  enum:
                    - sales
                    - purchases
                    - stock_movements
                    - all
                export_type:
                  type: string
                  description: ''
                  example: transactions
                  nullable: true
                  enum:
                    - transactions
                    - summary
                    - multi_sheet
                format:
                  type: string
                  description: ''
                  example: csv
                  nullable: true
                  enum:
                    - xlsx
                    - csv
                    - pdf
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/first-item:
    get:
      summary: 'Get the first item.'
      operationId: getTheFirstItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/first-item could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/first-item could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/last-item:
    get:
      summary: 'Get the last item.'
      operationId: getTheLastItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/last-item could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/last-item could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/parent-items:
    get:
      summary: 'Get parent items only.'
      operationId: getParentItemsOnly
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/parent-items could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/parent-items could not be found.'
      tags:
        - 'Inventory Management / Items'
  '/api/v1/items/by-type/{type}':
    get:
      summary: 'Get items by type.'
      operationId: getItemsByType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/by-type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/by-type/consequatur could not be found.'
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: type
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/deleted-items:
    get:
      summary: 'Get trashed (soft deleted) items.'
      operationId: getTrashedsoftDeletedItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/deleted-items could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/deleted-items could not be found.'
      tags:
        - 'Inventory Management / Items'
  '/api/v1/items/preview-item/{id}':
    get:
      summary: 'Get comprehensive preview/review data for an item.'
      operationId: getComprehensivePreviewreviewDataForAnItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/preview-item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/preview-item/consequatur could not be found.'
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the preview item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{id}/restore-item':
    post:
      summary: 'Restore a soft deleted item.'
      operationId: restoreASoftDeletedItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{id}/permanently-delete':
    delete:
      summary: 'Permanently delete an item (force delete).'
      operationId: permanentlyDeleteAnItemforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/manufacturing-formulas/catalog-all:
    get:
      summary: 'Display a listing of manufacturing formulas with advanced search and filtering.'
      operationId: displayAListingOfManufacturingFormulasWithAdvancedSearchAndFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/catalog-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/catalog-all could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/establish-formula:
    post:
      summary: '✅ Store Manufacturing Formula via API.'
      operationId: StoreManufacturingFormulaViaAPI
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                consumed_quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: false
                produced_quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 56
                  nullable: false
                labor_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 16
                  nullable: false
                operating_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 50
                  nullable: false
                waste_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 55
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                formula_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fuudtdsufvyvddqamniih
                  nullable: true
                formula_description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: fqcoynlazghdtqtqxbajw
                  nullable: true
                formula_number:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: bpilpmufinllwloauydls
                  nullable: true
                selected_purchase_price_type:
                  type: string
                  description: ''
                  example: second
                  nullable: true
                  enum:
                    - first
                    - second
                    - third
                quality_requirements:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: msjuryvojcybzvrbyickz
                  nullable: true
                requires_inspection:
                  type: boolean
                  description: ''
                  example: true
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: active
                  nullable: true
                  enum:
                    - draft
                    - active
                    - inactive
                    - archived
                is_active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: true
                batch_size:
                  type: number
                  description: 'Must be at least 0.'
                  example: 48
                  nullable: true
                production_time_minutes:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 36
                  nullable: true
                preparation_time_minutes:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 87
                  nullable: true
                production_notes:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: gloigmkwxphlvazjrcnfb
                  nullable: true
                preparation_notes:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: aqywuxhgjjmzuxjubqouz
                  nullable: true
                usage_instructions:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: swiwxtrkimfcatbxspzmr
                  nullable: true
                tolerance_percentage:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 1
                  nullable: true
                effective_from:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:25'
                  nullable: true
                effective_to:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>effective_from</code>.'
                  example: '2106-10-25'
                  nullable: true
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: true
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
              required:
                - item_id
                - consumed_quantity
                - produced_quantity
                - labor_cost
                - operating_cost
                - waste_cost
  '/api/v1/manufacturing-formulas/examine-formula/{id}':
    get:
      summary: 'Display the specified manufacturing formula.'
      operationId: displayTheSpecifiedManufacturingFormula
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/examine-formula/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/examine-formula/consequatur could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the examine formula.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/manufacturing-formulas/remove-formula/{id}':
    delete:
      summary: 'Remove the specified manufacturing formula (soft delete).'
      operationId: removeTheSpecifiedManufacturingFormulasoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the remove formula.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/manufacturing-formulas/item-numbers:
    get:
      summary: '✅ Get all Item Numbers for dropdown simulation.'
      operationId: GetAllItemNumbersForDropdownSimulation
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/item-numbers could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/item-numbers could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/item-details:
    get:
      summary: '✅ Get Item details by Item Number or Name.'
      operationId: GetItemDetailsByItemNumberOrName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/item-details could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/item-details could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/calculate-cost:
    post:
      summary: '✅ Calculate Final Cost for existing formula (API endpoint).'
      operationId: CalculateFinalCostForExistingFormulaAPIEndpoint
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/available-fields:
    get:
      summary: 'Get all available fields for dynamic data display.'
      operationId: getAllAvailableFieldsForDynamicDataDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/available-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/available-fields could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/field-values:
    get:
      summary: 'Get field values for dropdown filtering.'
      operationId: getFieldValuesForDropdownFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/field-values could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/selectable-fields:
    get:
      summary: '✅ Get all available fields for selection.'
      operationId: GetAllAvailableFieldsForSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/selectable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/selectable-fields could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/field-based-data:
    get:
      summary: '✅ Get field-based data display - Show data based on selected field.'
      operationId: GetFieldBasedDataDisplayShowDataBasedOnSelectedField
      description: 'When user clicks on any field in the table, show related data.'
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/field-based-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/field-based-data could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/formula-numbers:
    get:
      summary: '✅ Get manufacturing formula numbers for dropdown.'
      operationId: GetManufacturingFormulaNumbersForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/formula-numbers could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/formula-numbers could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/item-by-formula-number:
    get:
      summary: '✅ Get item details by manufacturing formula number.'
      operationId: GetItemDetailsByManufacturingFormulaNumber
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/item-by-formula-number could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/item-by-formula-number could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/manufacturing-formulas/warehouses:
    get:
      summary: '✅ Get warehouses for dropdown.'
      operationId: GetWarehousesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/warehouses could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/warehouses could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  '/api/v1/manufacturing-formulas/update-prices-from-suppliers/{id}':
    put:
      summary: '✅ Update prices from suppliers table for a manufactured formula.'
      operationId: UpdatePricesFromSuppliersTableForAManufacturedFormula
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the update prices from supplier.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/manufacturing-formulas/update-all-prices-from-suppliers:
    put:
      summary: '✅ Update prices from suppliers table for all manufactured formulas.'
      operationId: UpdatePricesFromSuppliersTableForAllManufacturedFormulas
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
  '/api/v1/manufacturing-formulas/{id}/restore-formula':
    post:
      summary: 'Restore a soft deleted manufacturing formula.'
      operationId: restoreASoftDeletedManufacturingFormula
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the manufacturing formula.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/manufacturing-formulas/{id}/permanently-remove':
    delete:
      summary: 'Force delete a manufacturing formula (permanent deletion).'
      operationId: forceDeleteAManufacturingFormulapermanentDeletion
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / ManufacturingFormula'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the manufacturing formula.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/manufacturing-formulas/deleted-formulas:
    get:
      summary: 'Get trashed (soft deleted) manufacturing formulas.'
      operationId: getTrashedsoftDeletedManufacturingFormulas
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/manufacturing-formulas/deleted-formulas could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/manufacturing-formulas/deleted-formulas could not be found.'
      tags:
        - 'Inventory Management / ManufacturingFormula'
  /api/v1/stock-movements/track-all:
    get:
      summary: 'Display a listing of stock movements.'
      operationId: displayAListingOfStockMovements
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/track-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/track-all could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
  /api/v1/stock-movements/record-movement:
    post:
      summary: 'Store a newly created stock movement.'
      operationId: storeANewlyCreatedStockMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Stock Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: null
                  nullable: true
                unit_id:
                  type: string
                  description: ''
                  example: null
                  nullable: true
                inventory_item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the inventory_items table.'
                  example: consequatur
                  nullable: false
                warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: consequatur
                  nullable: false
                movement_type:
                  type: string
                  description: ''
                  example: transfer
                  nullable: false
                  enum:
                    - in
                    - out
                    - transfer
                    - adjustment
                reference_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                reference_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                quantity:
                  type: number
                  description: 'Must be at least 0.01.'
                  example: 45
                  nullable: false
                unit_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 56
                  nullable: true
                total_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 16
                  nullable: true
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                movement_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:22'
                  nullable: true
              required:
                - inventory_item_id
                - warehouse_id
                - movement_type
                - quantity
  '/api/v1/stock-movements/examine-movement/{id}':
    get:
      summary: 'Display the specified stock movement.'
      operationId: displayTheSpecifiedStockMovement
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/examine-movement/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/examine-movement/consequatur could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the examine movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/stock-movements/modify-movement/{id}':
    put:
      summary: 'Update the specified stock movement.'
      operationId: updateTheSpecifiedStockMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Stock Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: null
                  nullable: true
                unit_id:
                  type: string
                  description: ''
                  example: null
                  nullable: true
                inventory_item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the inventory_items table.'
                  example: consequatur
                  nullable: false
                warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: consequatur
                  nullable: false
                movement_type:
                  type: string
                  description: ''
                  example: adjustment
                  nullable: false
                  enum:
                    - in
                    - out
                    - transfer
                    - adjustment
                reference_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                reference_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                quantity:
                  type: number
                  description: 'Must be at least 0.01.'
                  example: 45
                  nullable: false
                unit_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 56
                  nullable: true
                total_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 16
                  nullable: true
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                movement_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:22'
                  nullable: true
              required:
                - inventory_item_id
                - warehouse_id
                - movement_type
                - quantity
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the modify movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/stock-movements/remove-movement/{id}':
    delete:
      summary: 'Remove the specified stock movement (soft delete).'
      operationId: removeTheSpecifiedStockMovementsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the remove movement.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/stock-movements/movement-summary:
    get:
      summary: 'Get stock summary for all items.'
      operationId: getStockSummaryForAllItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/movement-summary could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/movement-summary could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
  '/api/v1/stock-movements/by-item/{itemId}':
    get:
      summary: 'Get stock movements for a specific item.'
      operationId: getStockMovementsForASpecificItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/by-item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/by-item/consequatur could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/stock-movements/by-warehouse/{warehouseId}':
    get:
      summary: 'Get stock movements for a specific warehouse.'
      operationId: getStockMovementsForASpecificWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/by-warehouse/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/by-warehouse/consequatur could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: warehouseId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/stock-movements/deleted-movements:
    get:
      summary: 'Get trashed (soft deleted) stock movements.'
      operationId: getTrashedsoftDeletedStockMovements
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/deleted-movements could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/deleted-movements could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
  '/api/v1/stock-movements/{id}/restore-movement':
    post:
      summary: 'Restore a soft deleted stock movement.'
      operationId: restoreASoftDeletedStockMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the stock movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/stock-movements/{id}/permanently-delete':
    delete:
      summary: 'Permanently delete a stock movement (force delete).'
      operationId: permanentlyDeleteAStockMovementforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the stock movement.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/units/catalog-all:
    get:
      summary: 'Display a listing of units.'
      operationId: displayAListingOfUnits
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/catalog-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/catalog-all could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/define-unit:
    post:
      summary: 'Store a newly created unit.'
      operationId: storeANewlyCreatedUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: true
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                symbol:
                  type: string
                  description: 'Must not be greater than 10 characters.'
                  example: qxbajwbpi
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                decimal_places:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 6.'
                  example: 1
                  nullable: false
                balance_unit:
                  type: string
                  description: ''
                  example: ton
                  nullable: false
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_balance_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: tdsufvyvddqamniihfqco
                  nullable: true
                length:
                  type: number
                  description: 'Must be at least 0.'
                  example: 85
                  nullable: true
                width:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                height:
                  type: number
                  description: 'Must be at least 0.'
                  example: 40
                  nullable: true
                quantity_factor:
                  type: number
                  description: 'Must be at least 0.0001.'
                  example: 1
                  nullable: true
                second_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_second_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: zghdtqtqxbajwbpilpmuf
                  nullable: true
                second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: inllwloauydlsmsjuryvo
                  nullable: true
                custom_second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jcybzvrbyickznkygloig
                  nullable: true
                second_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                second_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                third_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_third_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                custom_third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                third_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                third_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                default_handling_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                default_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - name
                - decimal_places
                - balance_unit
                - status
  '/api/v1/units/review-unit/{id}':
    get:
      summary: 'Display the specified unit.'
      operationId: displayTheSpecifiedUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/review-unit/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/review-unit/consequatur could not be found.'
      tags:
        - 'Inventory Management / Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the review unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/units/revise-unit/{id}':
    put:
      summary: 'Update the specified unit.'
      operationId: updateTheSpecifiedUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                symbol:
                  type: string
                  description: 'Must not be greater than 10 characters.'
                  example: qxbajwbpi
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                decimal_places:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 6.'
                  example: 1
                  nullable: false
                balance_unit:
                  type: string
                  description: ''
                  example: carton
                  nullable: false
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_balance_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: tdsufvyvddqamniihfqco
                  nullable: true
                length:
                  type: number
                  description: 'Must be at least 0.'
                  example: 85
                  nullable: true
                width:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                height:
                  type: number
                  description: 'Must be at least 0.'
                  example: 40
                  nullable: true
                quantity_factor:
                  type: number
                  description: 'Must be at least 0.0001.'
                  example: 1
                  nullable: true
                second_unit:
                  type: string
                  description: ''
                  example: ton
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_second_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: zghdtqtqxbajwbpilpmuf
                  nullable: true
                second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: inllwloauydlsmsjuryvo
                  nullable: true
                custom_second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jcybzvrbyickznkygloig
                  nullable: true
                second_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                second_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                third_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_third_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                custom_third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                third_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                third_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                default_handling_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                default_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - name
                - decimal_places
                - balance_unit
                - status
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the revise unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/units/eliminate-unit/{id}':
    delete:
      summary: 'Remove the specified unit (soft delete).'
      operationId: removeTheSpecifiedUnitsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the eliminate unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/units/unit-choices:
    get:
      summary: 'Get predefined unit options.'
      operationId: getPredefinedUnitOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/unit-choices could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/unit-choices could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/comprehensive-choices:
    get:
      summary: 'Get all unit options including custom ones.'
      operationId: getAllUnitOptionsIncludingCustomOnes
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/comprehensive-choices could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/comprehensive-choices could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/container-choices:
    get:
      summary: 'Get contains options.'
      operationId: getContainsOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/container-choices could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/container-choices could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/selection-dropdown:
    get:
      summary: 'Get units for dropdown selection.'
      operationId: getUnitsForDropdownSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/selection-dropdown could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/selection-dropdown could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/warehouse-selection:
    get:
      summary: 'Get warehouses for dropdown selection.'
      operationId: getWarehousesForDropdownSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/warehouse-selection could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/warehouse-selection could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/form-configuration:
    get:
      summary: 'Get comprehensive unit data for form.'
      operationId: getComprehensiveUnitDataForForm
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/form-configuration could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/form-configuration could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/initial-unit:
    get:
      summary: 'Get the first unit.'
      operationId: getTheFirstUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/initial-unit could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/initial-unit could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/final-unit:
    get:
      summary: 'Get the last unit.'
      operationId: getTheLastUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/final-unit could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/final-unit could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/deleted-units:
    get:
      summary: 'Get trashed (soft deleted) units.'
      operationId: getTrashedsoftDeletedUnits
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/deleted-units could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/deleted-units could not be found.'
      tags:
        - 'Inventory Management / Units'
  '/api/v1/units/{id}/restore-unit':
    post:
      summary: 'Restore a soft deleted unit.'
      operationId: restoreASoftDeletedUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/units/{id}/permanently-delete':
    delete:
      summary: 'Permanently delete a unit (force delete).'
      operationId: permanentlyDeleteAUnitforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/warehouses/scan-all:
    get:
      summary: 'Display a listing of warehouses.'
      operationId: displayAListingOfWarehouses
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/scan-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/scan-all could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/establish-facility:
    post:
      summary: '✅ Store a newly created warehouse with all required fields.'
      operationId: StoreANewlyCreatedWarehouseWithAllRequiredFields
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                warehouse_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Necessitatibus architecto aut consequatur debitis et id.'
                  nullable: true
                address:
                  type: string
                  description: 'Must not be greater than 500 characters.'
                  example: ilpmufinllwloauydlsms
                  nullable: true
                warehouse_keeper_employee_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: juryvojcybzvrbyickznk
                  nullable: true
                warehouse_keeper_employee_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ygloigmkwxphlvazjrcnf
                  nullable: true
                warehouse_keeper_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                mobile:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: mqeopfuudtdsufvyv
                  nullable: true
                fax_number:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: ddqamniihfqcoynla
                  nullable: true
                phone_number:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: zghdtqtqxbajwbpil
                  nullable: true
                sales_account_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                purchase_account_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                branch_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                department_warehouse_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                inventory_valuation_method:
                  type: string
                  description: ''
                  example: no_value
                  nullable: false
                  enum:
                    - natural_division
                    - no_value
                    - first_purchase_price
                    - second_purchase_price
                    - third_purchase_price
                status:
                  type: string
                  description: ''
                  example: active
                  nullable: false
                  enum:
                    - active
                    - inactive
                warehouse_data:
                  type: object
                  description: ''
                  example: null
                  nullable: true
                  properties: {  }
              required:
                - warehouse_number
                - name
                - inventory_valuation_method
                - status
  '/api/v1/warehouses/inspect-facility/{id}':
    get:
      summary: '✅ Display the specified warehouse with comprehensive data (Review/Preview).'
      operationId: DisplayTheSpecifiedWarehouseWithComprehensiveDataReviewPreview
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/inspect-facility/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/inspect-facility/consequatur could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inspect facility.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/warehouses/modify-facility/{id}':
    put:
      summary: '✅ Update the specified warehouse with full validation and field updates.'
      operationId: UpdateTheSpecifiedWarehouseWithFullValidationAndFieldUpdates
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                location:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                warehouse_keeper_employee_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: auydlsmsjuryvojcybzvr
                  nullable: true
                warehouse_keeper_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                mobile:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vazjrcnfbaqywuxhgjjmz
                  nullable: true
                fax_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uxjubqouzswiwxtrkimfc
                  nullable: true
                phone_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: atbxspzmrazsroyjpxmqe
                  nullable: true
                department_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the department_warehouses table.'
                  example: null
                  nullable: true
                purchase_account:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: sedyghenqcopwvownkbam
                  nullable: true
                sale_account:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: lnfngefbeilfzsyuxoezb
                  nullable: true
                inventory_valuation_method:
                  type: string
                  description: ''
                  example: no_value
                  nullable: false
                  enum:
                    - natural_division
                    - no_value
                    - first_purchase_price
                    - second_purchase_price
                    - third_purchase_price
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - name
                - inventory_valuation_method
                - status
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the modify facility.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/warehouses/demolish-facility/{id}':
    delete:
      summary: '✅ Remove the specified warehouse with soft delete.'
      operationId: RemoveTheSpecifiedWarehouseWithSoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the demolish facility.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/warehouses/configuration-data:
    get:
      summary: '✅ Get dropdown data for warehouse form.'
      operationId: GetDropdownDataForWarehouseForm
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/configuration-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/configuration-data could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/filter-by-criteria:
    get:
      summary: '✅ Filter warehouses by specific field value (Selection-Driven Display).'
      operationId: FilterWarehousesBySpecificFieldValueSelectionDrivenDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/filter-by-criteria could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/filter-by-criteria could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                field:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                value:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 13
                  nullable: true
                sort_by:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                sort_direction:
                  type: string
                  description: ''
                  example: desc
                  nullable: true
                  enum:
                    - asc
                    - desc
              required:
                - field
                - value
  /api/v1/warehouses/archived-facilities:
    get:
      summary: '✅ Get trashed warehouses (soft deleted).'
      operationId: GetTrashedWarehousessoftDeleted
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/archived-facilities could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/archived-facilities could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/initial-facility:
    get:
      summary: 'Get the first warehouse.'
      operationId: getTheFirstWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/initial-facility could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/initial-facility could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/final-facility:
    get:
      summary: 'Get the last warehouse.'
      operationId: getTheLastWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/final-facility could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/final-facility could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  '/api/v1/warehouses/{id}/reactivate-facility':
    post:
      summary: '✅ Restore a soft deleted warehouse.'
      operationId: RestoreASoftDeletedWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the warehouse.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/warehouses/{id}/permanently-remove':
    delete:
      summary: '✅ Permanently delete a warehouse.'
      operationId: PermanentlyDeleteAWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the warehouse.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-documents/gather-all:
    get:
      summary: 'Display a listing of documents.'
      operationId: displayAListingOfDocuments
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/gather-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/gather-all could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/compose-new:
    post:
      summary: 'Store a newly created document.'
      operationId: storeANewlyCreatedDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: consequatur
                  nullable: false
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                file:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 20480 kilobytes.'
                  nullable: false
                project_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                project_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                description:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: 'A qui ducimus nihil laudantium nihil autem omnis.'
                  nullable: true
                document_category:
                  type: string
                  description: ''
                  example: specification
                  nullable: true
                  enum:
                    - contract
                    - specification
                    - drawing
                    - report
                    - invoice
                    - correspondence
                    - other
                status:
                  type: string
                  description: ''
                  example: deleted
                  nullable: true
                  enum:
                    - active
                    - archived
                    - deleted
                upload_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:27'
                  nullable: true
                version:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: ryvojcybzvrbyickz
                  nullable: true
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: false
              required:
                - project_id
                - title
                - file
  '/api/v1/project-documents/read/{id}':
    get:
      summary: 'Display the specified document.'
      operationId: displayTheSpecifiedDocument
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/read/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/read/consequatur could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the read.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-documents/amend/{id}':
    put:
      summary: 'Update the specified document.'
      operationId: updateTheSpecifiedDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the amend.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-documents/erase/{id}':
    delete:
      summary: 'Remove the specified document (soft delete).'
      operationId: removeTheSpecifiedDocumentsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the erase.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-documents/{id}/file-download':
    get:
      summary: 'Download a document file.'
      operationId: downloadADocumentFile
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/consequatur/file-download could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/consequatur/file-download could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project document.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-documents/advanced-search:
    post:
      summary: 'Advanced search for documents.'
      operationId: advancedSearchForDocuments
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/filter-by-field:
    get:
      summary: 'Get documents by specific field value.'
      operationId: getDocumentsBySpecificFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/filter-by-field could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/field-values:
    get:
      summary: 'Get unique values for a specific field.'
      operationId: getUniqueValuesForASpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/field-values could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/sortable-fields:
    get:
      summary: 'Get sortable fields for documents.'
      operationId: getSortableFieldsForDocuments
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/sortable-fields could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/apply-sort:
    post:
      summary: 'Sort documents by specified field and order.'
      operationId: sortDocumentsBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
  '/api/v1/project-documents/{id}/restore-document':
    post:
      summary: 'Restore a soft-deleted document.'
      operationId: restoreASoftDeletedDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project document.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-documents/{id}/permanent-delete':
    delete:
      summary: 'Permanently delete a document.'
      operationId: permanentlyDeleteADocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project document.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-documents/deleted-documents:
    get:
      summary: 'Get trashed documents.'
      operationId: getTrashedDocuments
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/deleted-documents could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/deleted-documents could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/project-options:
    get:
      summary: 'Get projects for dropdown (with project number and name).'
      operationId: getProjectsForDropdownwithProjectNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/project-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/project-options could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/category-options:
    get:
      summary: 'Get document category options.'
      operationId: getDocumentCategoryOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/category-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/category-options could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/status-options:
    get:
      summary: 'Get document status options.'
      operationId: getDocumentStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/status-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/status-options could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/project-documents/number-generation:
    post:
      summary: 'Generate next document number for a project.'
      operationId: generateNextDocumentNumberForAProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
  '/api/v1/project-documents/by-project/{projectId}':
    get:
      summary: 'Get documents for a specific project.'
      operationId: getDocumentsForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/by-project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/by-project/consequatur could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-documents/by-category/{category}':
    get:
      summary: 'Get documents by category.'
      operationId: getDocumentsByCategory
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-documents/by-category/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-documents/by-category/consequatur could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: category
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-finance/obtain-all:
    get:
      summary: 'Display a listing of project financials.'
      operationId: displayAListingOfProjectFinancials
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/obtain-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/obtain-all could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/register-new:
    post:
      summary: 'Store a newly created project financial.'
      operationId: storeANewlyCreatedProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: consequatur
                  nullable: false
                currency_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the currencies table.'
                  example: consequatur
                  nullable: false
                exchange_rate:
                  type: number
                  description: 'Must be at least 0.0001. Must not be greater than 999999.9999.'
                  example: 13
                  nullable: false
                reference_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qeopfuudtdsufvyvddqam
                  nullable: false
                reference_id:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: niihfqcoynlazghdtqtqx
                  nullable: false
                amount:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 999999999999.99.'
                  example: 2
                  nullable: false
                date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:28'
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Consequatur debitis et id.'
                  nullable: true
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: true
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: true
                created_by:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
                updated_by:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
              required:
                - project_id
                - currency_id
                - exchange_rate
                - reference_type
                - reference_id
                - amount
                - date
  '/api/v1/project-finance/show/{id}':
    get:
      summary: 'Display the specified project financial.'
      operationId: displayTheSpecifiedProjectFinancial
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/show/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/show/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the show.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-finance/adjust/{id}':
    put:
      summary: 'Update the specified project financial.'
      operationId: updateTheSpecifiedProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                currency_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the currencies table.'
                  example: null
                  nullable: false
                exchange_rate:
                  type: number
                  description: 'Must be at least 0.0001. Must not be greater than 999999.9999.'
                  example: 21
                  nullable: false
                reference_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                reference_id:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                amount:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 999999999999.99.'
                  example: 23
                  nullable: false
                date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:28'
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Aut consequatur debitis et.'
                  nullable: true
                updated_by:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the adjust.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-finance/cancel/{id}':
    delete:
      summary: 'Remove the specified project financial (soft delete).'
      operationId: removeTheSpecifiedProjectFinancialsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the cancel.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-finance/advanced-search:
    post:
      summary: 'Advanced search for project financials.'
      operationId: advancedSearchForProjectFinancials
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/filter-by-field:
    get:
      summary: 'Get project financials by specific field.'
      operationId: getProjectFinancialsBySpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/filter-by-field could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/field-values:
    get:
      summary: 'Get field values for dynamic selection.'
      operationId: getFieldValuesForDynamicSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/field-values could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/sortable-fields:
    get:
      summary: 'Get sortable fields.'
      operationId: getSortableFields
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/sortable-fields could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/apply-sort:
    post:
      summary: 'Sort project financials.'
      operationId: sortProjectFinancials
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
  '/api/v1/project-finance/{id}/restore-financial':
    post:
      summary: 'Restore a soft-deleted project financial.'
      operationId: restoreASoftDeletedProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project finance.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-finance/{id}/permanent-delete':
    delete:
      summary: 'Force delete a project financial.'
      operationId: forceDeleteAProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project finance.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-finance/deleted-financials:
    get:
      summary: 'Get trashed project financials.'
      operationId: getTrashedProjectFinancials
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/deleted-financials could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/deleted-financials could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/project-options:
    get:
      summary: 'Get projects for dropdown.'
      operationId: getProjectsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/project-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/project-options could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-finance/currency-options:
    get:
      summary: 'Get currencies for dropdown.'
      operationId: getCurrenciesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/currency-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/currency-options could not be found.'
      tags:
        - 'Project Management / Financials'
  '/api/v1/project-finance/by-project/{projectId}':
    get:
      summary: 'Get project financials for a specific project.'
      operationId: getProjectFinancialsForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/by-project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/by-project/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-finance/by-reference-type/{referenceType}':
    get:
      summary: 'Get project financials by reference type.'
      operationId: getProjectFinancialsByReferenceType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/by-reference-type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/by-reference-type/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: referenceType
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-finance/by-date-range/{dateFrom}/{dateTo}':
    get:
      summary: 'Get project financials by date range.'
      operationId: getProjectFinancialsByDateRange
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-finance/by-date-range/consequatur/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-finance/by-date-range/consequatur/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: dateFrom
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: dateTo
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-milestones/retrieve-all:
    get:
      summary: 'Display a listing of milestones.'
      operationId: displayAListingOfMilestones
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/retrieve-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/retrieve-all could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/build-new:
    post:
      summary: 'Store a newly created milestone.'
      operationId: storeANewlyCreatedMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: consequatur
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                start_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>today</code>.'
                  example: '2106-10-25'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: completed
                  nullable: false
                  enum:
                    - not_started
                    - in_progress
                    - completed
                milestone_number:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 45
                  nullable: true
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Amet iste laborum eius est dolor dolores.'
                  nullable: true
                end_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>start_date</code>.'
                  example: '2106-10-25'
                  nullable: true
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 13
                  nullable: true
                notes:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: qeopfuudtdsufvyvddqam
                  nullable: true
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: false
              required:
                - project_id
                - name
                - start_date
                - status
  '/api/v1/project-milestones/view-single/{id}':
    get:
      summary: 'Display the specified milestone.'
      operationId: displayTheSpecifiedMilestone
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/view-single/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/view-single/consequatur could not be found.'
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the view single.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-milestones/edit-record/{id}':
    put:
      summary: 'Update the specified milestone.'
      operationId: updateTheSpecifiedMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                start_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:26'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: completed
                  nullable: false
                  enum:
                    - not_started
                    - in_progress
                    - completed
                milestone_number:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 2
                  nullable: true
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Molestias ipsam sit veniam sed fuga aspernatur.'
                  nullable: true
                end_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>start_date</code>.'
                  example: '2106-10-25'
                  nullable: true
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 13
                  nullable: true
                notes:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: qeopfuudtdsufvyvddqam
                  nullable: true
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the edit record.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-milestones/destroy-entry/{id}':
    delete:
      summary: 'Remove the specified milestone (soft delete).'
      operationId: removeTheSpecifiedMilestonesoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the destroy entry.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-milestones/advanced-search:
    post:
      summary: 'Advanced search for milestones.'
      operationId: advancedSearchForMilestones
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/filter-by-field:
    get:
      summary: 'Get milestones filtered by specific field value.'
      operationId: getMilestonesFilteredBySpecificFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/filter-by-field could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/field-values:
    get:
      summary: 'Get all field values for dropdown filtering.'
      operationId: getAllFieldValuesForDropdownFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/field-values could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/sortable-fields:
    get:
      summary: 'Get sortable fields list.'
      operationId: getSortableFieldsList
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/sortable-fields could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/apply-sort:
    post:
      summary: 'Sort milestones by specified field and order.'
      operationId: sortMilestonesBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
  '/api/v1/project-milestones/{id}/restore-milestone':
    post:
      summary: 'Restore a soft-deleted milestone.'
      operationId: restoreASoftDeletedMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project milestone.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-milestones/{id}/permanent-delete':
    delete:
      summary: 'Permanently delete a milestone.'
      operationId: permanentlyDeleteAMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project milestone.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-milestones/deleted-milestones:
    get:
      summary: 'Get trashed (soft-deleted) milestones.'
      operationId: getTrashedsoftDeletedMilestones
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/deleted-milestones could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/deleted-milestones could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/project-options:
    get:
      summary: 'Get projects for dropdown (with project number and name).'
      operationId: getProjectsForDropdownwithProjectNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/project-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/project-options could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/status-options:
    get:
      summary: 'Get milestone status options.'
      operationId: getMilestoneStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/status-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/status-options could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/project-milestones/number-generation:
    post:
      summary: 'Generate next milestone number for a project.'
      operationId: generateNextMilestoneNumberForAProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
  '/api/v1/project-milestones/by-project/{projectId}':
    get:
      summary: 'Get milestones for a specific project.'
      operationId: getMilestonesForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-milestones/by-project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-milestones/by-project/consequatur could not be found.'
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/browse-all:
    get:
      summary: 'List Projects'
      operationId: listProjects
      description: 'Retrieve a paginated list of projects with advanced search and filtering capabilities.'
      parameters:
        -
          in: query
          name: project_number
          description: 'Filter by project number.'
          example: PRJ-001
          required: false
          schema:
            type: string
            description: 'Filter by project number.'
            example: PRJ-001
            nullable: false
        -
          in: query
          name: project_name
          description: 'Filter by project name.'
          example: 'Website Development'
          required: false
          schema:
            type: string
            description: 'Filter by project name.'
            example: 'Website Development'
            nullable: false
        -
          in: query
          name: customer_name
          description: 'Filter by customer name.'
          example: 'ABC Company'
          required: false
          schema:
            type: string
            description: 'Filter by customer name.'
            example: 'ABC Company'
            nullable: false
        -
          in: query
          name: status
          description: 'Filter by project status.'
          example: active
          required: false
          schema:
            type: string
            description: 'Filter by project status.'
            example: active
            nullable: false
        -
          in: query
          name: project_manager_name
          description: 'Filter by project manager name.'
          example: 'John Doe'
          required: false
          schema:
            type: string
            description: 'Filter by project manager name.'
            example: 'John Doe'
            nullable: false
        -
          in: query
          name: exact_date
          description: 'Filter by exact date (Y-m-d format).'
          example: '2024-01-15'
          required: false
          schema:
            type: string
            description: 'Filter by exact date (Y-m-d format).'
            example: '2024-01-15'
            nullable: false
        -
          in: query
          name: date_from
          description: 'Filter projects from this date (Y-m-d format).'
          example: '2024-01-01'
          required: false
          schema:
            type: string
            description: 'Filter projects from this date (Y-m-d format).'
            example: '2024-01-01'
            nullable: false
        -
          in: query
          name: date_to
          description: 'Filter projects to this date (Y-m-d format).'
          example: '2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter projects to this date (Y-m-d format).'
            example: '2024-12-31'
            nullable: false
        -
          in: query
          name: start_date_from
          description: 'Filter by start date from (Y-m-d format).'
          example: '2024-01-01'
          required: false
          schema:
            type: string
            description: 'Filter by start date from (Y-m-d format).'
            example: '2024-01-01'
            nullable: false
        -
          in: query
          name: start_date_to
          description: 'Filter by start date to (Y-m-d format).'
          example: '2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by start date to (Y-m-d format).'
            example: '2024-12-31'
            nullable: false
        -
          in: query
          name: end_date_from
          description: 'Filter by end date from (Y-m-d format).'
          example: '2024-01-01'
          required: false
          schema:
            type: string
            description: 'Filter by end date from (Y-m-d format).'
            example: '2024-01-01'
            nullable: false
        -
          in: query
          name: end_date_to
          description: 'Filter by end date to (Y-m-d format).'
          example: '2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by end date to (Y-m-d format).'
            example: '2024-12-31'
            nullable: false
        -
          in: query
          name: general_search
          description: 'General search across multiple fields.'
          example: development
          required: false
          schema:
            type: string
            description: 'General search across multiple fields.'
            example: development
            nullable: false
        -
          in: query
          name: sort_field
          description: 'Field to sort by.'
          example: created_at
          required: false
          schema:
            type: string
            description: 'Field to sort by.'
            example: created_at
            nullable: false
        -
          in: query
          name: sort_direction
          description: 'Sort direction (asc/desc).'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort direction (asc/desc).'
            example: desc
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (default: 15).'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Number of items per page (default: 15).'
            example: 20
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  data:
                    -
                      id: 1
                      project_number: PRJ-001
                      project_name: 'Website Development'
                      customer_name: 'ABC Company'
                      status: active
                      project_manager_name: 'John Doe'
                      start_date: '2024-01-01'
                      end_date: '2024-06-30'
                      created_at: '2024-01-01T00:00:00.000000Z'
                  filters_applied: {  }
                  message: 'Projects retrieved successfully'
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        project_number: PRJ-001
                        project_name: 'Website Development'
                        customer_name: 'ABC Company'
                        status: active
                        project_manager_name: 'John Doe'
                        start_date: '2024-01-01'
                        end_date: '2024-06-30'
                        created_at: '2024-01-01T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        project_number:
                          type: string
                          example: PRJ-001
                        project_name:
                          type: string
                          example: 'Website Development'
                        customer_name:
                          type: string
                          example: 'ABC Company'
                        status:
                          type: string
                          example: active
                        project_manager_name:
                          type: string
                          example: 'John Doe'
                        start_date:
                          type: string
                          example: '2024-01-01'
                        end_date:
                          type: string
                          example: '2024-06-30'
                        created_at:
                          type: string
                          example: '2024-01-01T00:00:00.000000Z'
                  filters_applied:
                    type: object
                    properties: {  }
                  message:
                    type: string
                    example: 'Projects retrieved successfully'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Error retrieving projects: Database connection failed'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Error retrieving projects: Database connection failed'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/establish-new:
    post:
      summary: 'Create Project'
      operationId: createProject
      description: 'Create a new project with the provided details.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  data:
                    id: 1
                    project_number: PRJ-001
                    project_name: 'Website Development'
                    customer_name: 'ABC Company'
                    status: active
                    project_manager_name: 'John Doe'
                    start_date: '2024-01-01'
                    end_date: '2024-06-30'
                    created_at: '2024-01-01T00:00:00.000000Z'
                  message: 'Project created successfully'
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      project_number:
                        type: string
                        example: PRJ-001
                      project_name:
                        type: string
                        example: 'Website Development'
                      customer_name:
                        type: string
                        example: 'ABC Company'
                      status:
                        type: string
                        example: active
                      project_manager_name:
                        type: string
                        example: 'John Doe'
                      start_date:
                        type: string
                        example: '2024-01-01'
                      end_date:
                        type: string
                        example: '2024-06-30'
                      created_at:
                        type: string
                        example: '2024-01-01T00:00:00.000000Z'
                  message:
                    type: string
                    example: 'Project created successfully'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Validation failed'
                  errors:
                    project_name:
                      - 'The project name field is required.'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Validation failed'
                  errors:
                    type: object
                    properties:
                      project_name:
                        type: array
                        example:
                          - 'The project name field is required.'
                        items:
                          type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Error creating project: Database connection failed'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Error creating project: Database connection failed'
      tags:
        - 'Project Management / Projects'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: consequatur
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: consequatur
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: consequatur
                  nullable: false
                cost_center_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the cost_centers table.'
                  example: consequatur
                  nullable: false
                customer_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the customers table.'
                  example: consequatur
                  nullable: false
                currency_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the currencies table.'
                  example: consequatur
                  nullable: false
                currency_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: false
                include_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                project_number:
                  type: string
                  description: 'Unique project number.'
                  example: PRJ-001
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: niihfqcoynlazghdtqtqx
                  nullable: false
                description:
                  type: string
                  description: 'Project description.'
                  example: 'Complete website redesign and development'
                  nullable: true
                project_value:
                  type: number
                  description: 'Must be at least 0.'
                  example: 12
                  nullable: false
                manager_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: consequatur
                  nullable: false
                project_manager_name:
                  type: string
                  description: 'Name of the project manager.'
                  example: 'John Doe'
                  nullable: true
                start_date:
                  type: string
                  description: 'Project start date (Y-m-d format).'
                  example: '2024-01-01'
                  nullable: false
                end_date:
                  type: string
                  description: 'Project end date (Y-m-d format).'
                  example: '2024-06-30'
                  nullable: false
                status:
                  type: string
                  description: 'Project status.'
                  example: active
                  nullable: false
                country_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the countries table.'
                  example: consequatur
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                customer_name:
                  type: string
                  description: 'Name of the customer.'
                  example: 'ABC Company'
                  nullable: true
                customer_email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: eloisa.harber@example.com
                  nullable: true
                customer_phone:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: fqcoynlazghdtqtqx
                  nullable: true
                licensed_operator:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bajwbpilpmufinllwloau
                  nullable: true
                project_name:
                  type: string
                  description: 'The name of the project.'
                  example: 'Website Development'
                  nullable: false
                budget:
                  type: numeric
                  description: 'Project budget.'
                  example: '50000.00'
                  nullable: false
              required:
                - company_id
                - branch_id
                - fiscal_year_id
                - cost_center_id
                - customer_id
                - currency_id
                - currency_price
                - project_number
                - name
                - project_value
                - manager_id
                - project_manager_name
                - start_date
                - end_date
                - status
                - country_id
                - customer_name
                - project_name
  '/api/v1/projects/examine/{id}':
    get:
      summary: 'Show the specified resource with comprehensive data.'
      operationId: showTheSpecifiedResourceWithComprehensiveData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/examine/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/examine/consequatur could not be found.'
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the examine.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/projects/revise/{id}':
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: false
                cost_center_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the cost_centers table.'
                  example: null
                  nullable: false
                customer_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the customers table.'
                  example: null
                  nullable: false
                currency_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the currencies table.'
                  example: null
                  nullable: false
                currency_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 73
                  nullable: false
                include_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                project_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: false
                project_value:
                  type: number
                  description: 'Must be at least 0.'
                  example: 12
                  nullable: false
                manager_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: false
                project_manager_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: tdsufvyvddqamniihfqco
                  nullable: false
                start_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:26'
                  nullable: false
                end_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>start_date</code>.'
                  example: '2106-10-25'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: open
                  nullable: false
                  enum:
                    - draft
                    - open
                    - on-hold
                    - cancelled
                    - closed
                country_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the countries table.'
                  example: null
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                customer_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                customer_email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: eloisa.harber@example.com
                  nullable: false
                customer_phone:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: fqcoynlazghdtqtqx
                  nullable: false
                licensed_operator:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bajwbpilpmufinllwloau
                  nullable: false
                budget:
                  type: number
                  description: 'Must be at least 0.'
                  example: 87
                  nullable: false
                actual_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 13
                  nullable: false
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 12
                  nullable: false
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the revise.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/projects/eliminate/{id}':
    delete:
      summary: 'Delete a project (soft delete)'
      operationId: deleteAProjectsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the eliminate.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/advanced-search:
    post:
      summary: 'Advanced search for projects'
      operationId: advancedSearchForProjects
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/filter-by-field:
    get:
      summary: 'Get projects by specific field value for dynamic selection display'
      operationId: getProjectsBySpecificFieldValueForDynamicSelectionDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/filter-by-field could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/field-values:
    get:
      summary: 'Get unique values for a specific field for dropdown/selection'
      operationId: getUniqueValuesForASpecificFieldForDropdownselection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/field-values could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/sortable-fields:
    get:
      summary: 'Get sortable fields for projects'
      operationId: getSortableFieldsForProjects
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/sortable-fields could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/apply-sort:
    post:
      summary: 'Sort projects by specific field with first/last functionality'
      operationId: sortProjectsBySpecificFieldWithFirstlastFunctionality
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
  '/api/v1/projects/{id}/restore-project':
    post:
      summary: 'Restore a soft-deleted project'
      operationId: restoreASoftDeletedProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/projects/{id}/permanent-delete':
    delete:
      summary: 'Permanently delete a project (force delete)'
      operationId: permanentlyDeleteAProjectforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/deleted-projects:
    get:
      summary: 'Get trashed (soft-deleted) projects'
      operationId: getTrashedsoftDeletedProjects
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/deleted-projects could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/deleted-projects could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/customer-options:
    get:
      summary: 'Get all customers for dropdown'
      operationId: getAllCustomersForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/customer-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/customer-options could not be found.'
      tags:
        - 'Project Management / Projects'
  '/api/v1/projects/customer-details/{customerId}':
    get:
      summary: 'Get customer data when customer is selected'
      operationId: getCustomerDataWhenCustomerIsSelected
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/customer-details/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/customer-details/consequatur could not be found.'
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: customerId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/currency-options:
    get:
      summary: 'Get all currencies for dropdown'
      operationId: getAllCurrenciesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/currency-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/currency-options could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/employee-options:
    get:
      summary: 'Get all employees/users for project manager dropdown'
      operationId: getAllEmployeesusersForProjectManagerDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/employee-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/employee-options could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/country-options:
    get:
      summary: 'Get all countries for dropdown'
      operationId: getAllCountriesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/country-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/country-options could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/status-options:
    get:
      summary: 'Get project statuses for dropdown'
      operationId: getProjectStatusesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/status-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/status-options could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/vat-calculation:
    post:
      summary: 'Calculate VAT for given price and company'
      operationId: calculateVATForGivenPriceAndCompany
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/code-generation:
    get:
      summary: 'Generate next project code'
      operationId: generateNextProjectCode
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/code-generation could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/code-generation could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/project-resources/load-all:
    get:
      summary: 'List Project Resources'
      operationId: listProjectResources
      description: 'Retrieve a paginated list of project resources with comprehensive filtering and search capabilities.'
      parameters:
        -
          in: query
          name: project_id
          description: 'Filter by project ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by project ID.'
            example: 1
            nullable: false
        -
          in: query
          name: supplier_id
          description: 'Filter by supplier ID.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Filter by supplier ID.'
            example: 1
            nullable: false
        -
          in: query
          name: resource_type
          description: 'Filter by resource type.'
          example: material
          required: false
          schema:
            type: string
            description: 'Filter by resource type.'
            example: material
            nullable: false
        -
          in: query
          name: status
          description: 'Filter by resource status.'
          example: allocated
          required: false
          schema:
            type: string
            description: 'Filter by resource status.'
            example: allocated
            nullable: false
        -
          in: query
          name: supplier_number
          description: 'Search by supplier number.'
          example: SUP-001
          required: false
          schema:
            type: string
            description: 'Search by supplier number.'
            example: SUP-001
            nullable: false
        -
          in: query
          name: supplier_name
          description: 'Search by supplier name.'
          example: 'ABC Supplier'
          required: false
          schema:
            type: string
            description: 'Search by supplier name.'
            example: 'ABC Supplier'
            nullable: false
        -
          in: query
          name: project_number
          description: 'Search by project number.'
          example: PRJ-001
          required: false
          schema:
            type: string
            description: 'Search by project number.'
            example: PRJ-001
            nullable: false
        -
          in: query
          name: project_name
          description: 'Search by project name.'
          example: 'Website Development'
          required: false
          schema:
            type: string
            description: 'Search by project name.'
            example: 'Website Development'
            nullable: false
        -
          in: query
          name: allocation_from
          description: 'numeric Filter resources with allocation from this value.'
          example: '1000.00'
          required: false
          schema:
            type: string
            description: 'numeric Filter resources with allocation from this value.'
            example: '1000.00'
            nullable: false
        -
          in: query
          name: allocation_to
          description: 'numeric Filter resources with allocation to this value.'
          example: '5000.00'
          required: false
          schema:
            type: string
            description: 'numeric Filter resources with allocation to this value.'
            example: '5000.00'
            nullable: false
        -
          in: query
          name: date_from
          description: 'Filter by date from (Y-m-d format).'
          example: '2024-01-01'
          required: false
          schema:
            type: string
            description: 'Filter by date from (Y-m-d format).'
            example: '2024-01-01'
            nullable: false
        -
          in: query
          name: date_to
          description: 'Filter by date to (Y-m-d format).'
          example: '2024-12-31'
          required: false
          schema:
            type: string
            description: 'Filter by date to (Y-m-d format).'
            example: '2024-12-31'
            nullable: false
        -
          in: query
          name: sort_field
          description: 'Field to sort by.'
          example: created_at
          required: false
          schema:
            type: string
            description: 'Field to sort by.'
            example: created_at
            nullable: false
        -
          in: query
          name: sort_direction
          description: 'Sort direction (asc/desc).'
          example: desc
          required: false
          schema:
            type: string
            description: 'Sort direction (asc/desc).'
            example: desc
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (default: 15).'
          example: 20
          required: false
          schema:
            type: integer
            description: 'Number of items per page (default: 15).'
            example: 20
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: true
                  data:
                    -
                      id: 1
                      project:
                        id: 1
                        project_number: PRJ-001
                        project_name: 'Website Development'
                      supplier:
                        id: 1
                        supplier_number: SUP-001
                        supplier_name: 'ABC Supplier'
                      resource_type: material
                      allocation: 2500.0
                      status: allocated
                      created_at: '2024-01-01T00:00:00.000000Z'
                  message: 'Resources retrieved successfully'
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        project:
                          id: 1
                          project_number: PRJ-001
                          project_name: 'Website Development'
                        supplier:
                          id: 1
                          supplier_number: SUP-001
                          supplier_name: 'ABC Supplier'
                        resource_type: material
                        allocation: 2500
                        status: allocated
                        created_at: '2024-01-01T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        project:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            project_number:
                              type: string
                              example: PRJ-001
                            project_name:
                              type: string
                              example: 'Website Development'
                        supplier:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            supplier_number:
                              type: string
                              example: SUP-001
                            supplier_name:
                              type: string
                              example: 'ABC Supplier'
                        resource_type:
                          type: string
                          example: material
                        allocation:
                          type: number
                          example: 2500.0
                        status:
                          type: string
                          example: allocated
                        created_at:
                          type: string
                          example: '2024-01-01T00:00:00.000000Z'
                  message:
                    type: string
                    example: 'Resources retrieved successfully'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  success: false
                  message: 'Error retrieving resources: Database connection failed'
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Error retrieving resources: Database connection failed'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/construct-new:
    post:
      summary: 'Store a newly created resource.'
      operationId: storeANewlyCreatedResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: consequatur
                  nullable: false
                supplier_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the suppliers table.'
                  example: consequatur
                  nullable: false
                role:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                resource_type:
                  type: string
                  description: ''
                  example: internal
                  nullable: false
                  enum:
                    - supplier
                    - internal
                    - contractor
                    - consultant
                supplier_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                supplier_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                project_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                project_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                allocation_percentage:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 1
                  nullable: true
                allocation_value:
                  type: number
                  description: 'Must be at least 0.'
                  example: 87
                  nullable: true
                notes:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: jrcnfbaqywuxhgjjmzuxj
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: completed
                  nullable: true
                  enum:
                    - active
                    - inactive
                    - completed
                allocation:
                  type: string
                  description: 'Must not be greater than 500 characters.'
                  example: ubqouzswiwxtrkimfcatb
                  nullable: true
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: false
              required:
                - project_id
                - supplier_id
                - role
                - resource_type
  '/api/v1/project-resources/display/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/display/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/display/consequatur could not be found.'
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the display.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-resources/alter/{id}':
    put:
      summary: 'Update the specified resource.'
      operationId: updateTheSpecifiedResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                supplier_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the suppliers table.'
                  example: null
                  nullable: false
                role:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                resource_type:
                  type: string
                  description: ''
                  example: internal
                  nullable: false
                  enum:
                    - supplier
                    - internal
                    - contractor
                    - consultant
                supplier_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                supplier_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                project_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: auydlsmsjuryvojcybzvr
                  nullable: true
                project_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                allocation_percentage:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 22
                  nullable: true
                allocation_value:
                  type: number
                  description: 'Must be at least 0.'
                  example: 0
                  nullable: true
                notes:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: zjrcnfbaqywuxhgjjmzux
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: completed
                  nullable: true
                  enum:
                    - active
                    - inactive
                    - completed
                allocation:
                  type: string
                  description: 'Must not be greater than 500 characters.'
                  example: jubqouzswiwxtrkimfcat
                  nullable: true
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the alter.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-resources/purge/{id}':
    delete:
      summary: 'Remove the specified resource (soft delete).'
      operationId: removeTheSpecifiedResourcesoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the purge.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-resources/advanced-search:
    post:
      summary: 'Advanced search for resources.'
      operationId: advancedSearchForResources
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/filter-by-field:
    get:
      summary: 'Get resources by specific field value.'
      operationId: getResourcesBySpecificFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/filter-by-field could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/field-values:
    get:
      summary: 'Get unique values for a specific field.'
      operationId: getUniqueValuesForASpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/field-values could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/sortable-fields:
    get:
      summary: 'Get sortable fields for resources.'
      operationId: getSortableFieldsForResources
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/sortable-fields could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/apply-sort:
    post:
      summary: 'Sort resources by specified field and order.'
      operationId: sortResourcesBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  '/api/v1/project-resources/{id}/restore-resource':
    post:
      summary: 'Restore a soft-deleted resource.'
      operationId: restoreASoftDeletedResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project resource.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-resources/{id}/permanent-delete':
    delete:
      summary: 'Permanently delete a resource.'
      operationId: permanentlyDeleteAResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project resource.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-resources/deleted-resources:
    get:
      summary: 'Get trashed (soft-deleted) resources.'
      operationId: getTrashedsoftDeletedResources
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/deleted-resources could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/deleted-resources could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/supplier-options:
    get:
      summary: 'Get suppliers for dropdown (with supplier number and name).'
      operationId: getSuppliersForDropdownwithSupplierNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/supplier-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/supplier-options could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/project-options:
    get:
      summary: 'Get projects for dropdown (with project number and name).'
      operationId: getProjectsForDropdownwithProjectNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/project-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/project-options could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/type-options:
    get:
      summary: 'Get resource type options.'
      operationId: getResourceTypeOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/type-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/type-options could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/status-options:
    get:
      summary: 'Get resource status options.'
      operationId: getResourceStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/status-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/status-options could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/allocation-calculation:
    post:
      summary: 'Calculate allocation based on project value and percentage.'
      operationId: calculateAllocationBasedOnProjectValueAndPercentage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  /api/v1/project-resources/percentage-calculation:
    post:
      summary: 'Calculate allocation percentage based on project value and allocation value.'
      operationId: calculateAllocationPercentageBasedOnProjectValueAndAllocationValue
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  '/api/v1/project-resources/by-project/{projectId}':
    get:
      summary: 'Get resources for a specific project.'
      operationId: getResourcesForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/by-project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/by-project/consequatur could not be found.'
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-resources/by-supplier/{supplierId}':
    get:
      summary: 'Get resources for a specific supplier.'
      operationId: getResourcesForASpecificSupplier
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-resources/by-supplier/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-resources/by-supplier/consequatur could not be found.'
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: supplierId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-risk-management/risk-statistics:
    get:
      summary: 'Get project risk statistics and summary data.'
      operationId: getProjectRiskStatisticsAndSummaryData
      description: 'Can be filtered by project_id if provided.'
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/risk-statistics could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/risk-statistics could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/collect-all:
    get:
      summary: 'Display a listing of project risks.'
      operationId: displayAListingOfProjectRisks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/collect-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/collect-all could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/formulate-new:
    post:
      summary: 'Store a newly created project risk.'
      operationId: storeANewlyCreatedProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                title:
                  type: string
                  description: 'Must not be greater than 255 characters. Must be at least 3 characters.'
                  example: mqeopfuudtdsufvyvddqamniihfqcoynlazghdtqtqxbajwbpilpmufinllwloauydlsmsjury
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 65535 characters.'
                  example: 'Natus ex dicta hic inventore asperiores illum est.'
                  nullable: true
                impact:
                  type: string
                  description: ''
                  example: medium
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                probability:
                  type: string
                  description: ''
                  example: medium
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                mitigation_plan:
                  type: string
                  description: 'Must not be greater than 65535 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: closed
                  nullable: false
                  enum:
                    - open
                    - mitigated
                    - closed
                assigned_to:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
              required:
                - project_id
                - title
                - impact
                - probability
                - status
  '/api/v1/project-risk-management/present/{id}':
    get:
      summary: 'Display the specified project risk.'
      operationId: displayTheSpecifiedProjectRisk
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/present/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/present/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the present.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risk-management/modify-existing/{id}':
    put:
      summary: 'Update the specified project risk.'
      operationId: updateTheSpecifiedProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                title:
                  type: string
                  description: 'Must not be greater than 255 characters. Must be at least 3 characters.'
                  example: mqeopfuudtdsufvyvddqamniihfqcoynlazghdtqtqxbajwbpilpmufinllwloauydlsmsjury
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 65535 characters.'
                  example: 'Natus ex dicta hic inventore asperiores illum est.'
                  nullable: true
                impact:
                  type: string
                  description: ''
                  example: medium
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                probability:
                  type: string
                  description: ''
                  example: low
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                mitigation_plan:
                  type: string
                  description: 'Must not be greater than 65535 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: closed
                  nullable: false
                  enum:
                    - open
                    - mitigated
                    - closed
                assigned_to:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
              required:
                - project_id
                - title
                - impact
                - probability
                - status
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the modify existing.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risk-management/terminate/{id}':
    delete:
      summary: 'Remove the specified project risk (soft delete).'
      operationId: removeTheSpecifiedProjectRisksoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the terminate.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-risk-management/advanced-search:
    post:
      summary: 'Advanced search for project risks.'
      operationId: advancedSearchForProjectRisks
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/filter-by-field:
    get:
      summary: 'Get project risks filtered by specific field.'
      operationId: getProjectRisksFilteredBySpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/filter-by-field could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/field-values:
    get:
      summary: 'Get field values for dropdown filtering.'
      operationId: getFieldValuesForDropdownFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/field-values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/field-values could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/sortable-fields:
    get:
      summary: 'Get sortable fields for project risks.'
      operationId: getSortableFieldsForProjectRisks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/sortable-fields could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/apply-sort:
    post:
      summary: 'Sort project risks by specified field and direction.'
      operationId: sortProjectRisksBySpecifiedFieldAndDirection
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
  '/api/v1/project-risk-management/{id}/restore-risk':
    post:
      summary: 'Restore a soft-deleted project risk.'
      operationId: restoreASoftDeletedProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project risk management.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risk-management/{id}/permanent-delete':
    delete:
      summary: 'Permanently delete a project risk.'
      operationId: permanentlyDeleteAProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project risk management.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-risk-management/deleted-risks:
    get:
      summary: 'Get trashed (soft-deleted) project risks.'
      operationId: getTrashedsoftDeletedProjectRisks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/deleted-risks could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/deleted-risks could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/project-options:
    get:
      summary: 'Get projects for dropdown with bidirectional linking.'
      operationId: getProjectsForDropdownWithBidirectionalLinking
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/project-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/project-options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/employee-options:
    get:
      summary: 'Get employees for dropdown.'
      operationId: getEmployeesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/employee-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/employee-options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/impact-options:
    get:
      summary: 'Get impact options for dropdown.'
      operationId: getImpactOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/impact-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/impact-options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/probability-options:
    get:
      summary: 'Get probability options for dropdown.'
      operationId: getProbabilityOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/probability-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/probability-options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risk-management/status-options:
    get:
      summary: 'Get status options for dropdown.'
      operationId: getStatusOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/status-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/status-options could not be found.'
      tags:
        - 'Project Management / Risks'
  '/api/v1/project-risk-management/by-project/{projectId}':
    get:
      summary: 'Get project risks by specific project.'
      operationId: getProjectRisksBySpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/by-project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/by-project/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risk-management/by-status/{status}':
    get:
      summary: 'Get project risks by status.'
      operationId: getProjectRisksByStatus
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/by-status/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/by-status/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: status
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risk-management/by-impact/{impact}':
    get:
      summary: 'Get project risks by impact level.'
      operationId: getProjectRisksByImpactLevel
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/by-impact/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/by-impact/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: impact
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risk-management/by-probability/{probability}':
    get:
      summary: 'Get project risks by probability level.'
      operationId: getProjectRisksByProbabilityLevel
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risk-management/by-probability/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risk-management/by-probability/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: probability
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-tasks/fetch-all:
    get:
      summary: 'Display a listing of tasks.'
      operationId: displayAListingOfTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/fetch-all could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/fetch-all could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/generate-new:
    post:
      summary: 'Store a newly created task.'
      operationId: storeANewlyCreatedTask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: consequatur
                  nullable: false
                task_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                assigned_to:
                  type: string
                  description: 'The <code>id</code> of an existing record in the employees table.'
                  example: consequatur
                  nullable: false
                due_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>today</code>.'
                  example: '2106-10-25'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: blocked
                  nullable: false
                  enum:
                    - to_do
                    - in_progress
                    - done
                    - blocked
                milestone_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the project_milestones table.'
                  example: null
                  nullable: true
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                priority:
                  type: string
                  description: ''
                  example: low
                  nullable: true
                  enum:
                    - low
                    - medium
                    - high
                    - urgent
                start_date:
                  type: string
                  description: 'Must be a valid date. Must be a date before or equal to <code>due_date</code>.'
                  example: '2020-01-21'
                  nullable: true
                estimated_hours:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 1000.'
                  example: 13
                  nullable: true
                actual_hours:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 1000.'
                  example: 16
                  nullable: true
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 5
                  nullable: true
                records:
                  type: array
                  description: 'Must be a valid URL. Must not be greater than 500 characters.'
                  example:
                    - opfuudtdsufvyvddqamni
                  items:
                    type: string
                    nullable: true
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: false
              required:
                - project_id
                - task_name
                - assigned_to
                - due_date
                - status
  '/api/v1/project-tasks/inspect/{id}':
    get:
      summary: 'Display the specified task.'
      operationId: displayTheSpecifiedTask
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/inspect/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/inspect/consequatur could not be found.'
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inspect.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-tasks/update-existing/{id}':
    put:
      summary: 'Update the specified task.'
      operationId: updateTheSpecifiedTask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                task_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                assigned_to:
                  type: string
                  description: 'The <code>id</code> of an existing record in the employees table.'
                  example: null
                  nullable: false
                due_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:26'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: in_progress
                  nullable: false
                  enum:
                    - to_do
                    - in_progress
                    - done
                    - blocked
                milestone_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the project_milestones table.'
                  example: null
                  nullable: true
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                priority:
                  type: string
                  description: ''
                  example: high
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                    - urgent
                start_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-25T13:42:26'
                  nullable: false
                estimated_hours:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 1000.'
                  example: 13
                  nullable: false
                actual_hours:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 1000.'
                  example: 16
                  nullable: false
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 5
                  nullable: false
                records:
                  type: array
                  description: 'Must be a valid URL. Must not be greater than 500 characters.'
                  example:
                    - opfuudtdsufvyvddqamni
                  items:
                    type: string
                    nullable: true
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the update existing.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-tasks/delete-item/{id}':
    delete:
      summary: 'Remove the specified task.'
      operationId: removeTheSpecifiedTask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the delete item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-tasks/advanced-search:
    get:
      summary: 'Advanced search for tasks.'
      operationId: advancedSearchForTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/advanced-search could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/advanced-search could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/filter-by-field:
    get:
      summary: 'Get tasks filtered by specific field value (Dynamic Field Selection).'
      operationId: getTasksFilteredBySpecificFieldValueDynamicFieldSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/filter-by-field could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/assigned-to-me:
    get:
      summary: 'Get tasks assigned to the current user (My Tasks).'
      operationId: getTasksAssignedToTheCurrentUserMyTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/assigned-to-me could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/assigned-to-me could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/due-today:
    get:
      summary: 'Get tasks due today (Daily Due Date).'
      operationId: getTasksDueTodayDailyDueDate
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/due-today could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/due-today could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/overdue-tasks:
    get:
      summary: 'Get overdue tasks (tasks past due date but not completed).'
      operationId: getOverdueTaskstasksPastDueDateButNotCompleted
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/overdue-tasks could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/overdue-tasks could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/sortable-fields:
    get:
      summary: 'Get sortable fields for tasks.'
      operationId: getSortableFieldsForTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/sortable-fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/sortable-fields could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/apply-sort:
    post:
      summary: 'Sort tasks by specified field and order.'
      operationId: sortTasksBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/employee-options:
    get:
      summary: 'Get employees for assignment dropdown.'
      operationId: getEmployeesForAssignmentDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/employee-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/employee-options could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/status-options:
    get:
      summary: 'Get task status options.'
      operationId: getTaskStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/status-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/status-options could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/project-tasks/priority-options:
    get:
      summary: 'Get task priority options.'
      operationId: getTaskPriorityOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/priority-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/priority-options could not be found.'
      tags:
        - 'Project Management / Tasks'
  '/api/v1/project-tasks/by-project/{projectId}':
    get:
      summary: 'Get tasks for a specific project.'
      operationId: getTasksForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/by-project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/by-project/consequatur could not be found.'
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-tasks/{taskId}/upload-document':
    post:
      summary: 'Upload document for a task.'
      operationId: uploadDocumentForATask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: taskId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-tasks/{taskId}/task-documents':
    get:
      summary: 'Get documents for a task.'
      operationId: getDocumentsForATask
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-tasks/consequatur/task-documents could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-tasks/consequatur/task-documents could not be found.'
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: taskId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-tasks/document/{documentId}/remove':
    delete:
      summary: 'Delete a task document.'
      operationId: deleteATaskDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: documentId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
