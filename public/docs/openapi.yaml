openapi: 3.0.3
info:
  title: 'Al-Yaseen ERP API Documentation'
  description: 'API documentation for Al-Yaseen ERP Project Management and Inventory Management modules.'
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
tags:
  -
    name: Endpoints
    description: ''
  -
    name: 'Inventory Management / BOM Items'
    description: "\nAPIs for managing Bill of Materials (BOM) items, including component relationships and requirements calculation."
  -
    name: 'Inventory Management / Barcode Types'
    description: "\nAPIs for managing barcode types, validation, and barcode generation."
  -
    name: 'Inventory Management / Department Warehouses'
    description: "\nAPIs for managing department-warehouse relationships and access control."
  -
    name: 'Inventory Management / Inventory Items'
    description: "\nAPIs for managing inventory items, stock levels, and warehouse operations."
  -
    name: 'Inventory Management / Inventory Movements'
    description: "\nAPIs for managing inventory movements, including warehouse transfers, adjustments, and movement tracking."
  -
    name: 'Inventory Management / Item Types'
    description: "\nAPIs for managing item types, categories, and item classification."
  -
    name: 'Inventory Management / Item Units'
    description: "\nAPIs for managing item unit relationships, conversions, and unit-specific operations."
  -
    name: 'Inventory Management / Items'
    description: "\nAPIs for managing inventory items, including creation, updates, search, and transaction tracking."
  -
    name: 'Inventory Management / Stock Movements'
    description: "\nAPIs for managing stock movements, including transfers, adjustments, and movement tracking."
  -
    name: 'Inventory Management / Units'
    description: "\nAPIs for managing units of measure, including creation, updates, and unit conversions."
  -
    name: 'Inventory Management / Warehouses'
    description: "\nAPIs for managing warehouses, including creation, updates, search, and warehouse operations."
  -
    name: 'Project Management / Documents'
    description: "\nAPIs for managing project documents, including upload, download, categorization, and document lifecycle management."
  -
    name: 'Project Management / Financials'
    description: "\nAPIs for managing project financials, including budget tracking, expenses, revenue, and financial reporting."
  -
    name: 'Project Management / Milestones'
    description: "\nAPIs for managing project milestones, including creation, updates, tracking, and milestone lifecycle management."
  -
    name: 'Project Management / Projects'
    description: "\nAPIs for managing projects, including creation, updates, search, and project lifecycle management."
  -
    name: 'Project Management / Resources'
    description: "\nAPIs for managing project resources, including supplier allocation, resource tracking, and allocation calculations."
  -
    name: 'Project Management / Risks'
    description: "\nAPIs for managing project risks, including risk assessment, mitigation strategies, and risk monitoring."
  -
    name: 'Project Management / Tasks'
    description: "\nAPIs for managing project tasks, including creation, updates, assignments, and task lifecycle management."
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
paths:
  /api/v1/auth/login:
    post:
      summary: ''
      operationId: postApiV1AuthLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
  /api/v1/auth/logout:
    post:
      summary: ''
      operationId: postApiV1AuthLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
  '/api/v1/bom-items/item/{itemId}':
    get:
      summary: 'Get BOM items for a specific item (Bill of Materials).'
      operationId: getBOMItemsForASpecificItemBillOfMaterials
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/item/consequatur could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/bom-items/component/{componentId}':
    get:
      summary: 'Get items that use a specific component.'
      operationId: getItemsThatUseASpecificComponent
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/component/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/component/consequatur could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: componentId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/bom-items/calculate-requirements:
    post:
      summary: 'Calculate material requirements for production.'
      operationId: calculateMaterialRequirementsForProduction
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                production_quantity:
                  type: number
                  description: 'Must be at least 0.01.'
                  example: 45
                  nullable: false
              required:
                - item_id
                - production_quantity
  '/api/v1/bom-items/{id}':
    get:
      summary: 'Display the specified BOM item.'
      operationId: displayTheSpecifiedBOMItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/bom-items/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/bom-items/consequatur could not be found.'
      tags:
        - 'Inventory Management / BOM Items'
    put:
      summary: 'Update the specified BOM item.'
      operationId: updateTheSpecifiedBOMItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                component_id:
                  type: string
                  description: 'The value and <code>item_id</code> must be different. The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.000001.'
                  example: 45
                  nullable: false
              required:
                - item_id
                - component_id
                - unit_id
                - quantity
    delete:
      summary: 'Remove the specified BOM item.'
      operationId: removeTheSpecifiedBOMItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / BOM Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the bom item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/barcode-types/options:
    get:
      summary: 'Get barcode type options for dropdown.'
      operationId: getBarcodeTypeOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/options could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
  /api/v1/barcode-types/supported:
    get:
      summary: 'Get supported barcode types from Milon library.'
      operationId: getSupportedBarcodeTypesFromMilonLibrary
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/supported could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/supported could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
  '/api/v1/barcode-types/{id}':
    get:
      summary: 'Display the specified barcode type.'
      operationId: displayTheSpecifiedBarcodeType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/barcode-types/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/barcode-types/consequatur could not be found.'
      tags:
        - 'Inventory Management / Barcode Types'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the barcode type.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/barcode-types/validate:
    post:
      summary: 'Validate a barcode against a specific type.'
      operationId: validateABarcodeAgainstASpecificType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Barcode Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the barcode_types table.'
                  example: consequatur
                  nullable: false
              required:
                - barcode
                - barcode_type_id
  /api/v1/barcode-types/generate:
    post:
      summary: 'Generate barcode image (PNG or SVG).'
      operationId: generateBarcodeImagePNGOrSVG
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Barcode Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the barcode_types table.'
                  example: consequatur
                  nullable: false
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 5
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 16
                  nullable: true
                format:
                  type: string
                  description: ''
                  example: svg
                  nullable: true
                  enum:
                    - png
                    - svg
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
              required:
                - barcode
                - barcode_type_id
  /api/v1/barcode-types/generate-svg:
    post:
      summary: 'Generate SVG barcode specifically.'
      operationId: generateSVGBarcodeSpecifically
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Barcode Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the barcode_types table.'
                  example: consequatur
                  nullable: false
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 5
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 16
                  nullable: true
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
              required:
                - barcode
                - barcode_type_id
  /api/v1/department-warehouses/first:
    get:
      summary: 'Get the first department warehouse.'
      operationId: getTheFirstDepartmentWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/first could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/first could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
  /api/v1/department-warehouses/last:
    get:
      summary: 'Get the last department warehouse.'
      operationId: getTheLastDepartmentWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/last could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/last could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
  '/api/v1/department-warehouses/{id}':
    get:
      summary: 'Display the specified department warehouse.'
      operationId: displayTheSpecifiedDepartmentWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/department-warehouses/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/department-warehouses/consequatur could not be found.'
      tags:
        - 'Inventory Management / Department Warehouses'
    put:
      summary: 'Update the specified department warehouse.'
      operationId: updateTheSpecifiedDepartmentWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Department Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                department_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                department_name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                department_name_en:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                manager_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dtdsufvyvddqamniihfqc
                  nullable: true
                manager_phone:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: oynlazghdtqtqxbajwbpi
                  nullable: true
                manager_email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: jaunita.schamberger@example.com
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - department_number
                - department_name_ar
    delete:
      summary: 'Remove the specified department warehouse.'
      operationId: removeTheSpecifiedDepartmentWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Department Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the department warehouse.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-items/{id}':
    get:
      summary: 'Display the specified inventory item.'
      operationId: displayTheSpecifiedInventoryItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-items/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-items/consequatur could not be found.'
      tags:
        - 'Inventory Management / Inventory Items'
    put:
      summary: 'Update the specified inventory item.'
      operationId: updateTheSpecifiedInventoryItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                item_name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                item_name_en:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                barcode:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: auydlsmsjuryvojcybzvr
                  nullable: true
                model:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                unit:
                  type: string
                  description: 'Must not be greater than 50 characters.'
                  example: vazjrcnfbaqywuxhgjjmz
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 72
                  nullable: true
                unit_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 82
                  nullable: true
                minimum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 34
                  nullable: true
                reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 71
                  nullable: true
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                active:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
              required:
                - item_number
                - item_name_ar
                - unit
    delete:
      summary: 'Remove the specified inventory item.'
      operationId: removeTheSpecifiedInventoryItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/inventory-movements/form-data:
    get:
      summary: '✅ Get form data for inventory movement.'
      operationId: GetFormDataForInventoryMovement
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/form-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/form-data could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/filter-by-field:
    get:
      summary: '✅ Filter inventory movements by specific field value (Selection-Driven Display).'
      operationId: FilterInventoryMovementsBySpecificFieldValueSelectionDrivenDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/filter-by-field could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                field:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                value:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 13
                  nullable: true
                sort_by:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                sort_direction:
                  type: string
                  description: ''
                  example: asc
                  nullable: true
                  enum:
                    - asc
                    - desc
              required:
                - field
                - value
  /api/v1/inventory-movements/trashed:
    get:
      summary: '✅ Get trashed inventory movements (soft deleted).'
      operationId: GetTrashedInventoryMovementssoftDeleted
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/trashed could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/trashed could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/first:
    get:
      summary: '✅ Get first inventory movement (First/Last sorting).'
      operationId: GetFirstInventoryMovementFirstLastSorting
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/first could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/first could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/last:
    get:
      summary: '✅ Get last inventory movement (First/Last sorting).'
      operationId: GetLastInventoryMovementFirstLastSorting
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/last could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/last could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
  /api/v1/inventory-movements/next-movement-number:
    get:
      summary: '✅ Get next sequential movement number for preview.'
      operationId: GetNextSequentialMovementNumberForPreview
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/next-movement-number could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/next-movement-number could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                warehouse_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                movement_type:
                  type: string
                  description: ''
                  example: transfer
                  nullable: false
                  enum:
                    - outbound
                    - inbound
                    - transfer
                    - manufacturing
                    - inventory_count
              required:
                - warehouse_id
                - movement_type
  '/api/v1/inventory-movements/{id}':
    get:
      summary: '✅ Display the specified inventory movement.'
      operationId: DisplayTheSpecifiedInventoryMovement
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/consequatur could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
    put:
      summary: '✅ Update the specified inventory movement.'
      operationId: UpdateTheSpecifiedInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                movement_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: true
                movement_type:
                  type: string
                  description: ''
                  example: inbound
                  nullable: false
                  enum:
                    - outbound
                    - inbound
                    - transfer
                    - manufacturing
                    - inventory_count
                movement_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:37'
                  nullable: true
                movement_time:
                  type: string
                  description: 'Must be a valid date in the format <code>H:i:s</code>.'
                  example: '10:25:37'
                  nullable: true
                vendor_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                customer_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                vendor_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                customer_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                movement_description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                inbound_invoice_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                outbound_invoice_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
                inbound_invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                outbound_invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                user_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                shipment_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                invoice_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: yickznkygloigmkwxphlv
                  nullable: true
                reference:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: azjrcnfbaqywuxhgjjmzu
                  nullable: true
                warehouse_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: cancelled
                  nullable: true
                  enum:
                    - draft
                    - confirmed
                    - cancelled
                movement_data:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: object
                    nullable: true
                    properties:
                      id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: true
                      item_id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: false
                      unit_id:
                        type: integer
                        description: ''
                        example: 17
                        nullable: true
                      quantity:
                        type: number
                        description: 'Must be at least 0.0001.'
                        example: 45
                        nullable: false
                      unit_cost:
                        type: number
                        description: 'Must be at least 0.'
                        example: 56
                        nullable: true
                      unit_price:
                        type: number
                        description: 'Must be at least 0.'
                        example: 16
                        nullable: true
                      inventory_count:
                        type: number
                        description: 'Must be at least 0.'
                        example: 50
                        nullable: true
                      notes:
                        type: string
                        description: 'Must not be greater than 500 characters.'
                        example: pfuudtdsufvyvddqamnii
                        nullable: true
                      batch_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: hfqcoynlazghdtqtqxbaj
                        nullable: true
                      expiry_date:
                        type: string
                        description: 'Must be a valid date.'
                        example: '2025-09-16T10:25:37'
                        nullable: true
                      serial_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: wbpilpmufinllwloauydl
                        nullable: true
                      location_code:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: smsjuryvojcybzvrbyick
                        nullable: true
                      shelf_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: znkygloigmkwxphlvazjr
                        nullable: true
                      bin_number:
                        type: string
                        description: 'Must not be greater than 255 characters.'
                        example: cnfbaqywuxhgjjmzuxjub
                        nullable: true
                      _delete:
                        type: boolean
                        description: ''
                        example: true
                        nullable: true
                    required:
                      - item_id
                      - quantity
              required:
                - movement_type
                - warehouse_id
    delete:
      summary: '✅ Remove the specified inventory movement (soft delete).'
      operationId: RemoveTheSpecifiedInventoryMovementsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/movement-data':
    get:
      summary: '✅ Get movement data with sorting (First/Last for movement data table).'
      operationId: GetMovementDataWithSortingFirstLastForMovementDataTable
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/inventory-movements/consequatur/movement-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/inventory-movements/consequatur/movement-data could not be found.'
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/confirm':
    post:
      summary: '✅ Confirm inventory movement.'
      operationId: ConfirmInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/duplicate':
    post:
      summary: '✅ Duplicate inventory movement with new date and time.'
      operationId: DuplicateInventoryMovementWithNewDateAndTime
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/restore':
    post:
      summary: '✅ Restore a soft deleted inventory movement.'
      operationId: RestoreASoftDeletedInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/inventory-movements/{id}/force':
    delete:
      summary: '✅ Permanently delete an inventory movement.'
      operationId: PermanentlyDeleteAnInventoryMovement
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Inventory Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the inventory movement.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/item-types/options:
    get:
      summary: 'Get item type options for dropdown.'
      operationId: getItemTypeOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-types/options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-types/options could not be found.'
      tags:
        - 'Inventory Management / Item Types'
  '/api/v1/item-types/{id}':
    get:
      summary: 'Display the specified item type.'
      operationId: displayTheSpecifiedItemType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-types/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-types/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Types'
    put:
      summary: 'Update the specified item type.'
      operationId: updateTheSpecifiedItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Types'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                description_ar:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                is_active:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
              required:
                - name
    delete:
      summary: 'Remove the specified item type.'
      operationId: removeTheSpecifiedItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Types'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item type.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/item-units/type-options:
    get:
      summary: 'Get unit type options.'
      operationId: getUnitTypeOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/type-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/type-options could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/contains-options:
    get:
      summary: 'Get contains options for item units.'
      operationId: getContainsOptionsForItemUnits
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/contains-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/contains-options could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/form-data:
    get:
      summary: 'Get item unit form data.'
      operationId: getItemUnitFormData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/form-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/form-data could not be found.'
      tags:
        - 'Inventory Management / Item Units'
  /api/v1/item-units/calculate-conversion:
    post:
      summary: 'Calculate conversion between units.'
      operationId: calculateConversionBetweenUnits
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the item_units table.'
                  example: consequatur
                  nullable: false
                to_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the item_units table.'
                  example: consequatur
                  nullable: false
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: false
              required:
                - from_unit_id
                - to_unit_id
                - quantity
  '/api/v1/item-units/item/{itemId}':
    get:
      summary: 'Get item units for a specific item.'
      operationId: getItemUnitsForASpecificItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/item/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/item/{itemId}/type/{type}':
    get:
      summary: 'Get item units by type.'
      operationId: getItemUnitsByType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/item/consequatur/type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/item/consequatur/type/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: type
        description: 'The type.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/item/{itemId}/comprehensive':
    get:
      summary: 'Get comprehensive item unit data.'
      operationId: getComprehensiveItemUnitData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/item/consequatur/comprehensive could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/item/consequatur/comprehensive could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/{id}':
    get:
      summary: 'Display the specified item unit.'
      operationId: displayTheSpecifiedItemUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/item-units/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/item-units/consequatur could not be found.'
      tags:
        - 'Inventory Management / Item Units'
    put:
      summary: 'Update the specified item unit.'
      operationId: updateTheSpecifiedItemUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                conversion_rate:
                  type: number
                  description: 'Must be at least 0.000001.'
                  example: 45
                  nullable: false
                is_default:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                unit_type:
                  type: string
                  description: ''
                  example: second
                  nullable: false
                  enum:
                    - balance
                    - second
                    - third
                quantity_factor:
                  type: number
                  description: 'Must be at least 0.0001.'
                  example: 56
                  nullable: true
                balance_unit:
                  type: string
                  description: ''
                  example: ton
                  nullable: false
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_balance_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: eopfuudtdsufvyvddqamn
                  nullable: true
                length:
                  type: number
                  description: 'Must be at least 0.'
                  example: 28
                  nullable: true
                width:
                  type: number
                  description: 'Must be at least 0.'
                  example: 30
                  nullable: true
                height:
                  type: number
                  description: 'Must be at least 0.'
                  example: 25
                  nullable: true
                second_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_second_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fqcoynlazghdtqtqxbajw
                  nullable: true
                second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bpilpmufinllwloauydls
                  nullable: true
                custom_second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: msjuryvojcybzvrbyickz
                  nullable: true
                second_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                second_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                third_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_third_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                custom_third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                third_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                third_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                default_handling_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                default_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                custom_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                unit_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                unit_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 46
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - item_id
                - unit_id
                - conversion_rate
                - unit_type
                - balance_unit
                - status
    delete:
      summary: 'Remove the specified item unit.'
      operationId: removeTheSpecifiedItemUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item unit.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/item-units/{id}/set-default':
    put:
      summary: 'Set default unit for an item.'
      operationId: setDefaultUnitForAnItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Item Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/search:
    get:
      summary: 'Search for items with advanced filtering.'
      operationId: searchForItemsWithAdvancedFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/search could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/search could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/fields:
    get:
      summary: 'Get available fields for dynamic selection.'
      operationId: getAvailableFieldsForDynamicSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/fields could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/fields could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/columns:
    get:
      summary: 'Get sortable columns with their Arabic labels.'
      operationId: getSortableColumnsWithTheirArabicLabels
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/columns could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/columns could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/categories:
    get:
      summary: 'Get available categories/types for filtering.'
      operationId: getAvailableCategoriestypesForFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/categories could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/categories could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/warehouses:
    get:
      summary: 'Get available warehouses for item creation.'
      operationId: getAvailableWarehousesForItemCreation
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/warehouses could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/warehouses could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/pricing-form-data:
    get:
      summary: 'Get pricing validation and form data.'
      operationId: getPricingValidationAndFormData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/pricing-form-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/pricing-form-data could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/validate-pricing:
    post:
      summary: 'Validate pricing data.'
      operationId: validatePricingData
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: consequatur
                  nullable: false
                proposed_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                proposed_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 16
                  nullable: true
              required:
                - item_id
  /api/v1/items/barcode-types:
    get:
      summary: 'Get barcode types for dropdown.'
      operationId: getBarcodeTypesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/barcode-types could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/barcode-types could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/item-types:
    get:
      summary: 'Get item types for dropdown.'
      operationId: getItemTypesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/item-types could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/item-types could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/custom-item-type:
    post:
      summary: 'Create custom item type.'
      operationId: createCustomItemType
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                name_ar:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
              required:
                - name
  /api/v1/items/validate-barcode:
    post:
      summary: 'Validate barcode format.'
      operationId: validateBarcodeFormat
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                barcode:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                barcode_type:
                  type: string
                  description: ''
                  example: ITF
                  nullable: false
                  enum:
                    - C128
                    - EAN13
                    - C39
                    - UPCA
                    - ITF
              required:
                - barcode
                - barcode_type
  '/api/v1/items/{item}/generate-barcode':
    post:
      summary: 'Generate barcode for item (PNG or SVG).'
      operationId: generateBarcodeForItemPNGOrSVG
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 9
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 13
                  nullable: true
                format:
                  type: string
                  description: ''
                  example: png
                  nullable: true
                  enum:
                    - png
                    - svg
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{item}/generate-barcode-svg':
    post:
      summary: 'Generate SVG barcode for item specifically.'
      operationId: generateSVGBarcodeForItemSpecifically
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                width:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 10.'
                  example: 9
                  nullable: true
                height:
                  type: integer
                  description: 'Must be at least 10. Must not be greater than 100.'
                  example: 13
                  nullable: true
                color:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{item}/transactions':
    get:
      summary: 'Get all transactions/movements for a specific item.'
      operationId: getAllTransactionsmovementsForASpecificItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/consequatur/transactions could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/consequatur/transactions could not be found.'
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                date_from:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:36'
                  nullable: true
                date_to:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>date_from</code>.'
                  example: '2106-10-15'
                  nullable: true
                transaction_type:
                  type: string
                  description: ''
                  example: stock_movements
                  nullable: true
                  enum:
                    - sales
                    - purchases
                    - stock_movements
                    - all
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 13
                  nullable: true
                sort_by:
                  type: string
                  description: ''
                  example: quantity
                  nullable: true
                  enum:
                    - date
                    - type
                    - quantity
                    - amount
                sort_direction:
                  type: string
                  description: ''
                  example: desc
                  nullable: true
                  enum:
                    - asc
                    - desc
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{item}/transactions/export':
    get:
      summary: 'Export item transactions to Excel.'
      operationId: exportItemTransactionsToExcel
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/consequatur/transactions/export could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/consequatur/transactions/export could not be found.'
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                date_from:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:36'
                  nullable: true
                date_to:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>date_from</code>.'
                  example: '2106-10-15'
                  nullable: true
                transaction_type:
                  type: string
                  description: ''
                  example: purchases
                  nullable: true
                  enum:
                    - sales
                    - purchases
                    - stock_movements
                    - all
                export_type:
                  type: string
                  description: ''
                  example: transactions
                  nullable: true
                  enum:
                    - transactions
                    - summary
                    - multi_sheet
                format:
                  type: string
                  description: ''
                  example: pdf
                  nullable: true
                  enum:
                    - xlsx
                    - csv
                    - pdf
    parameters:
      -
        in: path
        name: item
        description: 'The item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/first:
    get:
      summary: 'Get the first item.'
      operationId: getTheFirstItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/first could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/first could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/last:
    get:
      summary: 'Get the last item.'
      operationId: getTheLastItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/last could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/last could not be found.'
      tags:
        - 'Inventory Management / Items'
  /api/v1/items/parents:
    get:
      summary: 'Get parent items only.'
      operationId: getParentItemsOnly
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/parents could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/parents could not be found.'
      tags:
        - 'Inventory Management / Items'
  '/api/v1/items/type/{type}':
    get:
      summary: 'Get items by type.'
      operationId: getItemsByType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/type/consequatur could not be found.'
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: type
        description: 'The type.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/items/trashed:
    get:
      summary: 'Get trashed (soft deleted) items.'
      operationId: getTrashedsoftDeletedItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/trashed could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/trashed could not be found.'
      tags:
        - 'Inventory Management / Items'
  '/api/v1/items/{id}':
    get:
      summary: 'Display the specified item with all available data.'
      operationId: displayTheSpecifiedItemWithAllAvailableData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/consequatur could not be found.'
      tags:
        - 'Inventory Management / Items'
    put:
      summary: 'Update the specified item.'
      operationId: updateTheSpecifiedItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: consequatur
                  nullable: false
                parent_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the items table.'
                  example: null
                  nullable: true
                item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                catalog_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                model:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: dtdsufvyvddqamniihfqc
                  nullable: true
                unit_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: oynlazghdtqtqxbajwbpi
                  nullable: true
                type:
                  type: string
                  description: ''
                  example: raw_material
                  nullable: false
                  enum:
                    - product
                    - service
                    - material
                    - raw_material
                quantity:
                  type: number
                  description: 'Must be at least 0.'
                  example: 41
                  nullable: true
                balance:
                  type: number
                  description: ''
                  example: 11613.31890586
                  nullable: true
                minimum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 50
                  nullable: true
                maximum_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 55
                  nullable: true
                reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 19
                  nullable: true
                max_reorder_limit:
                  type: number
                  description: 'Must be at least 0.'
                  example: 70
                  nullable: true
                first_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 70
                  nullable: true
                second_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 12
                  nullable: true
                third_purchase_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 66
                  nullable: true
                purchase_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 4
                  nullable: true
                purchase_prices_include_vat:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                first_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 65
                  nullable: true
                second_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 72
                  nullable: true
                third_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 18
                  nullable: true
                sale_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 21
                  nullable: true
                maximum_sale_discount_rate:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 24
                  nullable: true
                minimum_allowed_sale_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 76
                  nullable: true
                sale_prices_include_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                item_subject_to_vat:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                barcode:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                barcode_type:
                  type: string
                  description: ''
                  example: C128
                  nullable: true
                  enum:
                    - C128
                    - EAN13
                    - C39
                    - UPCA
                    - ITF
                expiry_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>today</code>.'
                  example: '2106-10-15'
                  nullable: true
                image:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                color:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                item_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: false
                active:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
                stock_tracking:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
              required:
                - unit_id
                - item_number
                - code
                - name
                - type
                - item_type
    delete:
      summary: 'Remove the specified item (soft delete).'
      operationId: removeTheSpecifiedItemsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{id}/preview':
    get:
      summary: 'Get comprehensive preview/review data for an item.'
      operationId: getComprehensivePreviewreviewDataForAnItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/items/consequatur/preview could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/items/consequatur/preview could not be found.'
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{id}/restore':
    post:
      summary: 'Restore a soft deleted item.'
      operationId: restoreASoftDeletedItem
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/items/{id}/force':
    delete:
      summary: 'Permanently delete an item (force delete).'
      operationId: permanentlyDeleteAnItemforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Items'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the item.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/stock-movements/summary:
    get:
      summary: 'Get stock summary for all items.'
      operationId: getStockSummaryForAllItems
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/summary could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/summary could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
  '/api/v1/stock-movements/item/{itemId}':
    get:
      summary: 'Get stock movements for a specific item.'
      operationId: getStockMovementsForASpecificItem
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/item/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/item/consequatur could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: itemId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/stock-movements/warehouse/{warehouseId}':
    get:
      summary: 'Get stock movements for a specific warehouse.'
      operationId: getStockMovementsForASpecificWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/warehouse/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/warehouse/consequatur could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: warehouseId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/stock-movements/{id}':
    get:
      summary: 'Display the specified stock movement.'
      operationId: displayTheSpecifiedStockMovement
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/stock-movements/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/stock-movements/consequatur could not be found.'
      tags:
        - 'Inventory Management / Stock Movements'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the stock movement.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/units/options:
    get:
      summary: 'Get predefined unit options.'
      operationId: getPredefinedUnitOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/options could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/all-options:
    get:
      summary: 'Get all unit options including custom ones.'
      operationId: getAllUnitOptionsIncludingCustomOnes
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/all-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/all-options could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/contains-options:
    get:
      summary: 'Get contains options.'
      operationId: getContainsOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/contains-options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/contains-options could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/dropdown:
    get:
      summary: 'Get units for dropdown selection.'
      operationId: getUnitsForDropdownSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/dropdown could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/dropdown could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/warehouses-dropdown:
    get:
      summary: 'Get warehouses for dropdown selection.'
      operationId: getWarehousesForDropdownSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/warehouses-dropdown could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/warehouses-dropdown could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/form-data:
    get:
      summary: 'Get comprehensive unit data for form.'
      operationId: getComprehensiveUnitDataForForm
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/form-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/form-data could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/first:
    get:
      summary: 'Get the first unit.'
      operationId: getTheFirstUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/first could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/first could not be found.'
      tags:
        - 'Inventory Management / Units'
  /api/v1/units/last:
    get:
      summary: 'Get the last unit.'
      operationId: getTheLastUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/last could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/last could not be found.'
      tags:
        - 'Inventory Management / Units'
  '/api/v1/units/{id}':
    get:
      summary: 'Display the specified unit.'
      operationId: displayTheSpecifiedUnit
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/units/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/units/consequatur could not be found.'
      tags:
        - 'Inventory Management / Units'
    put:
      summary: 'Update the specified unit.'
      operationId: updateTheSpecifiedUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                symbol:
                  type: string
                  description: 'Must not be greater than 10 characters.'
                  example: qxbajwbpi
                  nullable: true
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: true
                decimal_places:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 6.'
                  example: 1
                  nullable: false
                balance_unit:
                  type: string
                  description: ''
                  example: kilo
                  nullable: false
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_balance_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: tdsufvyvddqamniihfqco
                  nullable: true
                length:
                  type: number
                  description: 'Must be at least 0.'
                  example: 85
                  nullable: true
                width:
                  type: number
                  description: 'Must be at least 0.'
                  example: 45
                  nullable: true
                height:
                  type: number
                  description: 'Must be at least 0.'
                  example: 40
                  nullable: true
                quantity_factor:
                  type: number
                  description: 'Must be at least 0.0001.'
                  example: 1
                  nullable: true
                second_unit:
                  type: string
                  description: ''
                  example: piece
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_second_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: zghdtqtqxbajwbpilpmuf
                  nullable: true
                second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: inllwloauydlsmsjuryvo
                  nullable: true
                custom_second_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: jcybzvrbyickznkygloig
                  nullable: true
                second_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                second_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                third_unit:
                  type: string
                  description: ''
                  example: liter
                  nullable: true
                  enum:
                    - piece
                    - liter
                    - kilo
                    - ton
                    - carton
                custom_third_unit:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: true
                third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: xbajwbpilpmufinllwloa
                  nullable: true
                custom_third_unit_contains:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uydlsmsjuryvojcybzvrb
                  nullable: true
                third_unit_content:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                third_unit_item_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: true
                default_handling_unit_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the units table.'
                  example: null
                  nullable: true
                default_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the warehouses table.'
                  example: null
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - name
                - decimal_places
                - balance_unit
                - status
    delete:
      summary: 'Remove the specified unit.'
      operationId: removeTheSpecifiedUnit
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Units'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the unit.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/warehouses/form-data:
    get:
      summary: '✅ Get dropdown data for warehouse form.'
      operationId: GetDropdownDataForWarehouseForm
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/form-data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/form-data could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/filter-by-field:
    get:
      summary: '✅ Filter warehouses by specific field value (Selection-Driven Display).'
      operationId: FilterWarehousesBySpecificFieldValueSelectionDrivenDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/filter-by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/filter-by-field could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                field:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                value:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 13
                  nullable: true
                sort_by:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: true
                sort_direction:
                  type: string
                  description: ''
                  example: desc
                  nullable: true
                  enum:
                    - asc
                    - desc
              required:
                - field
                - value
  /api/v1/warehouses/trashed:
    get:
      summary: '✅ Get trashed warehouses (soft deleted).'
      operationId: GetTrashedWarehousessoftDeleted
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/trashed could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/trashed could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/first:
    get:
      summary: 'Get the first warehouse.'
      operationId: getTheFirstWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/first could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/first could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  /api/v1/warehouses/last:
    get:
      summary: 'Get the last warehouse.'
      operationId: getTheLastWarehouse
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/last could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/last could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
  '/api/v1/warehouses/{id}':
    get:
      summary: '✅ Display the specified warehouse with comprehensive data (Review/Preview).'
      operationId: DisplayTheSpecifiedWarehouseWithComprehensiveDataReviewPreview
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/warehouses/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/warehouses/consequatur could not be found.'
      tags:
        - 'Inventory Management / Warehouses'
    put:
      summary: '✅ Update the specified warehouse with full validation and field updates.'
      operationId: UpdateTheSpecifiedWarehouseWithFullValidationAndFieldUpdates
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: true
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                code:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                location:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                warehouse_keeper_employee_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: auydlsmsjuryvojcybzvr
                  nullable: true
                warehouse_keeper_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                mobile:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vazjrcnfbaqywuxhgjjmz
                  nullable: true
                fax_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: uxjubqouzswiwxtrkimfc
                  nullable: true
                phone_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: atbxspzmrazsroyjpxmqe
                  nullable: true
                department_warehouse_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the department_warehouses table.'
                  example: null
                  nullable: true
                purchase_account:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: sedyghenqcopwvownkbam
                  nullable: true
                sale_account:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: lnfngefbeilfzsyuxoezb
                  nullable: true
                inventory_valuation_method:
                  type: string
                  description: ''
                  example: natural_division
                  nullable: false
                  enum:
                    - natural_division
                    - no_value
                    - first_purchase_price
                    - second_purchase_price
                    - third_purchase_price
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: false
                  enum:
                    - active
                    - inactive
              required:
                - name
                - inventory_valuation_method
                - status
    delete:
      summary: '✅ Remove the specified warehouse with soft delete.'
      operationId: RemoveTheSpecifiedWarehouseWithSoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the warehouse.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/warehouses/{id}/restore':
    post:
      summary: '✅ Restore a soft deleted warehouse.'
      operationId: RestoreASoftDeletedWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the warehouse.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/warehouses/{id}/force':
    delete:
      summary: '✅ Permanently delete a warehouse.'
      operationId: PermanentlyDeleteAWarehouse
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Inventory Management / Warehouses'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the warehouse.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/documents/{id}':
    get:
      summary: 'Display the specified document.'
      operationId: displayTheSpecifiedDocument
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/consequatur could not be found.'
      tags:
        - 'Project Management / Documents'
    put:
      summary: 'Update the specified document.'
      operationId: updateTheSpecifiedDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                file:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 20480 kilobytes.'
                  nullable: true
                project_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                project_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                description:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: 'Et a qui ducimus.'
                  nullable: true
                document_category:
                  type: string
                  description: ''
                  example: drawing
                  nullable: true
                  enum:
                    - contract
                    - specification
                    - drawing
                    - report
                    - invoice
                    - correspondence
                    - other
                status:
                  type: string
                  description: ''
                  example: active
                  nullable: true
                  enum:
                    - active
                    - archived
                    - deleted
                upload_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:38'
                  nullable: true
                version:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: smsjuryvojcybzvrb
                  nullable: true
    delete:
      summary: 'Remove the specified document (soft delete).'
      operationId: removeTheSpecifiedDocumentsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the document.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/documents/{id}/download':
    get:
      summary: 'Download a document file.'
      operationId: downloadADocumentFile
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/consequatur/download could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/consequatur/download could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the document.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/documents/search:
    post:
      summary: 'Advanced search for documents.'
      operationId: advancedSearchForDocuments
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/filter/by-field:
    get:
      summary: 'Get documents by specific field value.'
      operationId: getDocumentsBySpecificFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/filter/by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/filter/by-field could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/fields/values:
    get:
      summary: 'Get unique values for a specific field.'
      operationId: getUniqueValuesForASpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/fields/values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/fields/values could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/fields/sortable:
    get:
      summary: 'Get sortable fields for documents.'
      operationId: getSortableFieldsForDocuments
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/fields/sortable could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/sort:
    post:
      summary: 'Sort documents by specified field and order.'
      operationId: sortDocumentsBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
  '/api/v1/documents/{id}/restore':
    post:
      summary: 'Restore a soft-deleted document.'
      operationId: restoreASoftDeletedDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the document.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/documents/{id}/force-delete':
    delete:
      summary: 'Permanently delete a document.'
      operationId: permanentlyDeleteADocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the document.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/documents/trashed/list:
    get:
      summary: 'Get trashed documents.'
      operationId: getTrashedDocuments
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/trashed/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/trashed/list could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/projects/list:
    get:
      summary: 'Get projects for dropdown (with project number and name).'
      operationId: getProjectsForDropdownwithProjectNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/projects/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/projects/list could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/categories/list:
    get:
      summary: 'Get document category options.'
      operationId: getDocumentCategoryOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/categories/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/categories/list could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/statuses/list:
    get:
      summary: 'Get document status options.'
      operationId: getDocumentStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/statuses/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/statuses/list could not be found.'
      tags:
        - 'Project Management / Documents'
  /api/v1/documents/generate-number:
    post:
      summary: 'Generate next document number for a project.'
      operationId: generateNextDocumentNumberForAProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Documents'
  '/api/v1/documents/project/{projectId}':
    get:
      summary: 'Get documents for a specific project.'
      operationId: getDocumentsForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/project/consequatur could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/documents/category/{category}':
    get:
      summary: 'Get documents by category.'
      operationId: getDocumentsByCategory
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/documents/category/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/documents/category/consequatur could not be found.'
      tags:
        - 'Project Management / Documents'
    parameters:
      -
        in: path
        name: category
        description: 'The category.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-financials/{id}':
    get:
      summary: 'Display the specified project financial.'
      operationId: displayTheSpecifiedProjectFinancial
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    put:
      summary: 'Update the specified project financial.'
      operationId: updateTheSpecifiedProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                currency_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the currencies table.'
                  example: null
                  nullable: false
                exchange_rate:
                  type: number
                  description: 'Must be at least 0.0001. Must not be greater than 999999.9999.'
                  example: 21
                  nullable: false
                reference_type:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                reference_id:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                amount:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 999999999999.99.'
                  example: 23
                  nullable: false
                date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:39'
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Aut consequatur debitis et.'
                  nullable: true
                updated_by:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
    delete:
      summary: 'Remove the specified project financial (soft delete).'
      operationId: removeTheSpecifiedProjectFinancialsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project financial.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-financials/search:
    post:
      summary: 'Advanced search for project financials.'
      operationId: advancedSearchForProjectFinancials
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
  /api/v1/project-financials/filter/by-field:
    get:
      summary: 'Get project financials by specific field.'
      operationId: getProjectFinancialsBySpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/filter/by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/filter/by-field could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-financials/fields/values:
    get:
      summary: 'Get field values for dynamic selection.'
      operationId: getFieldValuesForDynamicSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/fields/values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/fields/values could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-financials/fields/sortable:
    get:
      summary: 'Get sortable fields.'
      operationId: getSortableFields
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/fields/sortable could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-financials/sort:
    post:
      summary: 'Sort project financials.'
      operationId: sortProjectFinancials
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
  '/api/v1/project-financials/{id}/restore':
    post:
      summary: 'Restore a soft-deleted project financial.'
      operationId: restoreASoftDeletedProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project financial.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-financials/{id}/force-delete':
    delete:
      summary: 'Force delete a project financial.'
      operationId: forceDeleteAProjectFinancial
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project financial.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-financials/trashed/list:
    get:
      summary: 'Get trashed project financials.'
      operationId: getTrashedProjectFinancials
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/trashed/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/trashed/list could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-financials/projects/list:
    get:
      summary: 'Get projects for dropdown.'
      operationId: getProjectsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/projects/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/projects/list could not be found.'
      tags:
        - 'Project Management / Financials'
  /api/v1/project-financials/currencies/list:
    get:
      summary: 'Get currencies for dropdown.'
      operationId: getCurrenciesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/currencies/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/currencies/list could not be found.'
      tags:
        - 'Project Management / Financials'
  '/api/v1/project-financials/project/{projectId}':
    get:
      summary: 'Get project financials for a specific project.'
      operationId: getProjectFinancialsForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/project/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-financials/reference-type/{referenceType}':
    get:
      summary: 'Get project financials by reference type.'
      operationId: getProjectFinancialsByReferenceType
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/reference-type/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/reference-type/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: referenceType
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-financials/date-range/{dateFrom}/{dateTo}':
    get:
      summary: 'Get project financials by date range.'
      operationId: getProjectFinancialsByDateRange
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-financials/date-range/consequatur/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-financials/date-range/consequatur/consequatur could not be found.'
      tags:
        - 'Project Management / Financials'
    parameters:
      -
        in: path
        name: dateFrom
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: dateTo
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/milestones/{id}':
    get:
      summary: 'Display the specified milestone.'
      operationId: displayTheSpecifiedMilestone
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/consequatur could not be found.'
      tags:
        - 'Project Management / Milestones'
    put:
      summary: 'Update the specified milestone.'
      operationId: updateTheSpecifiedMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                start_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:38'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: in_progress
                  nullable: false
                  enum:
                    - not_started
                    - in_progress
                    - completed
                milestone_number:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 2
                  nullable: true
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Molestias ipsam sit veniam sed fuga aspernatur.'
                  nullable: true
                end_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after or equal to <code>start_date</code>.'
                  example: '2106-10-15'
                  nullable: true
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 13
                  nullable: true
                notes:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: qeopfuudtdsufvyvddqam
                  nullable: true
    delete:
      summary: 'Remove the specified milestone (soft delete).'
      operationId: removeTheSpecifiedMilestonesoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the milestone.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/milestones/search:
    post:
      summary: 'Advanced search for milestones.'
      operationId: advancedSearchForMilestones
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/filter/by-field:
    get:
      summary: 'Get milestones filtered by specific field value.'
      operationId: getMilestonesFilteredBySpecificFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/filter/by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/filter/by-field could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/fields/values:
    get:
      summary: 'Get all field values for dropdown filtering.'
      operationId: getAllFieldValuesForDropdownFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/fields/values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/fields/values could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/fields/sortable:
    get:
      summary: 'Get sortable fields list.'
      operationId: getSortableFieldsList
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/fields/sortable could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/sort:
    post:
      summary: 'Sort milestones by specified field and order.'
      operationId: sortMilestonesBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
  '/api/v1/milestones/{id}/restore':
    post:
      summary: 'Restore a soft-deleted milestone.'
      operationId: restoreASoftDeletedMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the milestone.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/milestones/{id}/force-delete':
    delete:
      summary: 'Permanently delete a milestone.'
      operationId: permanentlyDeleteAMilestone
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the milestone.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/milestones/trashed/list:
    get:
      summary: 'Get trashed (soft-deleted) milestones.'
      operationId: getTrashedsoftDeletedMilestones
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/trashed/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/trashed/list could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/projects/list:
    get:
      summary: 'Get projects for dropdown (with project number and name).'
      operationId: getProjectsForDropdownwithProjectNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/projects/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/projects/list could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/statuses/list:
    get:
      summary: 'Get milestone status options.'
      operationId: getMilestoneStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/statuses/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/statuses/list could not be found.'
      tags:
        - 'Project Management / Milestones'
  /api/v1/milestones/generate-number:
    post:
      summary: 'Generate next milestone number for a project.'
      operationId: generateNextMilestoneNumberForAProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Milestones'
  '/api/v1/milestones/project/{projectId}':
    get:
      summary: 'Get milestones for a specific project.'
      operationId: getMilestonesForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/milestones/project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/milestones/project/consequatur could not be found.'
      tags:
        - 'Project Management / Milestones'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/projects/{id}':
    get:
      summary: 'Show the specified resource with comprehensive data.'
      operationId: showTheSpecifiedResourceWithComprehensiveData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/consequatur could not be found.'
      tags:
        - 'Project Management / Projects'
    put:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                company_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the companies table.'
                  example: null
                  nullable: false
                branch_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the branches table.'
                  example: null
                  nullable: false
                fiscal_year_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the fiscal_years table.'
                  example: null
                  nullable: false
                cost_center_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the cost_centers table.'
                  example: null
                  nullable: false
                customer_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the customers table.'
                  example: null
                  nullable: false
                currency_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the currencies table.'
                  example: null
                  nullable: false
                currency_price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 73
                  nullable: false
                include_vat:
                  type: boolean
                  description: ''
                  example: true
                  nullable: false
                project_number:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mniihfqcoynlazghdtqtq
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: false
                project_value:
                  type: number
                  description: 'Must be at least 0.'
                  example: 12
                  nullable: false
                manager_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: false
                project_manager_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: tdsufvyvddqamniihfqco
                  nullable: false
                start_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:37'
                  nullable: false
                end_date:
                  type: string
                  description: 'Must be a valid date. Must be a date after <code>start_date</code>.'
                  example: '2106-10-15'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: closed
                  nullable: false
                  enum:
                    - draft
                    - open
                    - on-hold
                    - cancelled
                    - closed
                country_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the countries table.'
                  example: null
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                customer_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: mqeopfuudtdsufvyvddqa
                  nullable: false
                customer_email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: eloisa.harber@example.com
                  nullable: false
                customer_phone:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: fqcoynlazghdtqtqx
                  nullable: false
                licensed_operator:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: bajwbpilpmufinllwloau
                  nullable: false
                budget:
                  type: number
                  description: 'Must be at least 0.'
                  example: 87
                  nullable: false
                actual_cost:
                  type: number
                  description: 'Must be at least 0.'
                  example: 13
                  nullable: false
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 12
                  nullable: false
    delete:
      summary: 'Delete a project (soft delete)'
      operationId: deleteAProjectsoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/search:
    post:
      summary: 'Advanced search for projects'
      operationId: advancedSearchForProjects
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/filter/by-field:
    get:
      summary: 'Get projects by specific field value for dynamic selection display'
      operationId: getProjectsBySpecificFieldValueForDynamicSelectionDisplay
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/filter/by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/filter/by-field could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/fields/values:
    get:
      summary: 'Get unique values for a specific field for dropdown/selection'
      operationId: getUniqueValuesForASpecificFieldForDropdownselection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/fields/values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/fields/values could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/fields/sortable:
    get:
      summary: 'Get sortable fields for projects'
      operationId: getSortableFieldsForProjects
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/fields/sortable could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/sort:
    post:
      summary: 'Sort projects by specific field with first/last functionality'
      operationId: sortProjectsBySpecificFieldWithFirstlastFunctionality
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
  '/api/v1/projects/{id}/restore':
    post:
      summary: 'Restore a soft-deleted project'
      operationId: restoreASoftDeletedProject
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/projects/{id}/force-delete':
    delete:
      summary: 'Permanently delete a project (force delete)'
      operationId: permanentlyDeleteAProjectforceDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/trashed/list:
    get:
      summary: 'Get trashed (soft-deleted) projects'
      operationId: getTrashedsoftDeletedProjects
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/trashed/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/trashed/list could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/customers/list:
    get:
      summary: 'Get all customers for dropdown'
      operationId: getAllCustomersForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/customers/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/customers/list could not be found.'
      tags:
        - 'Project Management / Projects'
  '/api/v1/projects/customers/{customerId}/data':
    get:
      summary: 'Get customer data when customer is selected'
      operationId: getCustomerDataWhenCustomerIsSelected
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/customers/consequatur/data could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/customers/consequatur/data could not be found.'
      tags:
        - 'Project Management / Projects'
    parameters:
      -
        in: path
        name: customerId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/projects/currencies/list:
    get:
      summary: 'Get all currencies for dropdown'
      operationId: getAllCurrenciesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/currencies/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/currencies/list could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/employees/list:
    get:
      summary: 'Get all employees/users for project manager dropdown'
      operationId: getAllEmployeesusersForProjectManagerDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/employees/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/employees/list could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/countries/list:
    get:
      summary: 'Get all countries for dropdown'
      operationId: getAllCountriesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/countries/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/countries/list could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/statuses/list:
    get:
      summary: 'Get project statuses for dropdown'
      operationId: getProjectStatusesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/statuses/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/statuses/list could not be found.'
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/calculate-vat:
    post:
      summary: 'Calculate VAT for given price and company'
      operationId: calculateVATForGivenPriceAndCompany
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Projects'
  /api/v1/projects/generate-code:
    get:
      summary: 'Generate next project code'
      operationId: generateNextProjectCode
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/projects/generate-code could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/projects/generate-code could not be found.'
      tags:
        - 'Project Management / Projects'
  '/api/v1/resources/{id}':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/consequatur could not be found.'
      tags:
        - 'Project Management / Resources'
    put:
      summary: 'Update the specified resource.'
      operationId: updateTheSpecifiedResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                supplier_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the suppliers table.'
                  example: null
                  nullable: false
                role:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                resource_type:
                  type: string
                  description: ''
                  example: supplier
                  nullable: false
                  enum:
                    - supplier
                    - internal
                    - contractor
                    - consultant
                supplier_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: true
                supplier_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: qxbajwbpilpmufinllwlo
                  nullable: true
                project_number:
                  type: string
                  description: 'Must not be greater than 100 characters.'
                  example: auydlsmsjuryvojcybzvr
                  nullable: true
                project_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                allocation_percentage:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 22
                  nullable: true
                allocation_value:
                  type: number
                  description: 'Must be at least 0.'
                  example: 0
                  nullable: true
                notes:
                  type: string
                  description: 'Must not be greater than 2000 characters.'
                  example: zjrcnfbaqywuxhgjjmzux
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: inactive
                  nullable: true
                  enum:
                    - active
                    - inactive
                    - completed
                allocation:
                  type: string
                  description: 'Must not be greater than 500 characters.'
                  example: jubqouzswiwxtrkimfcat
                  nullable: true
    delete:
      summary: 'Remove the specified resource (soft delete).'
      operationId: removeTheSpecifiedResourcesoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the resource.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/resources/search:
    post:
      summary: 'Advanced search for resources.'
      operationId: advancedSearchForResources
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/filter/by-field:
    get:
      summary: 'Get resources by specific field value.'
      operationId: getResourcesBySpecificFieldValue
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/filter/by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/filter/by-field could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/fields/values:
    get:
      summary: 'Get unique values for a specific field.'
      operationId: getUniqueValuesForASpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/fields/values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/fields/values could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/fields/sortable:
    get:
      summary: 'Get sortable fields for resources.'
      operationId: getSortableFieldsForResources
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/fields/sortable could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/sort:
    post:
      summary: 'Sort resources by specified field and order.'
      operationId: sortResourcesBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  '/api/v1/resources/{id}/restore':
    post:
      summary: 'Restore a soft-deleted resource.'
      operationId: restoreASoftDeletedResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the resource.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/resources/{id}/force-delete':
    delete:
      summary: 'Permanently delete a resource.'
      operationId: permanentlyDeleteAResource
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the resource.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/resources/trashed/list:
    get:
      summary: 'Get trashed (soft-deleted) resources.'
      operationId: getTrashedsoftDeletedResources
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/trashed/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/trashed/list could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/suppliers/list:
    get:
      summary: 'Get suppliers for dropdown (with supplier number and name).'
      operationId: getSuppliersForDropdownwithSupplierNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/suppliers/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/suppliers/list could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/projects/list:
    get:
      summary: 'Get projects for dropdown (with project number and name).'
      operationId: getProjectsForDropdownwithProjectNumberAndName
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/projects/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/projects/list could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/types/list:
    get:
      summary: 'Get resource type options.'
      operationId: getResourceTypeOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/types/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/types/list could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/statuses/list:
    get:
      summary: 'Get resource status options.'
      operationId: getResourceStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/statuses/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/statuses/list could not be found.'
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/calculate-allocation:
    post:
      summary: 'Calculate allocation based on project value and percentage.'
      operationId: calculateAllocationBasedOnProjectValueAndPercentage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  /api/v1/resources/calculate-percentage:
    post:
      summary: 'Calculate allocation percentage based on project value and allocation value.'
      operationId: calculateAllocationPercentageBasedOnProjectValueAndAllocationValue
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Resources'
  '/api/v1/resources/project/{projectId}':
    get:
      summary: 'Get resources for a specific project.'
      operationId: getResourcesForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/project/consequatur could not be found.'
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/resources/supplier/{supplierId}':
    get:
      summary: 'Get resources for a specific supplier.'
      operationId: getResourcesForASpecificSupplier
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/resources/supplier/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/resources/supplier/consequatur could not be found.'
      tags:
        - 'Project Management / Resources'
    parameters:
      -
        in: path
        name: supplierId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risks/{id}':
    get:
      summary: 'Display the specified project risk.'
      operationId: displayTheSpecifiedProjectRisk
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    put:
      summary: 'Update the specified project risk.'
      operationId: updateTheSpecifiedProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                title:
                  type: string
                  description: 'Must not be greater than 255 characters. Must be at least 3 characters.'
                  example: mqeopfuudtdsufvyvddqamniihfqcoynlazghdtqtqxbajwbpilpmufinllwloauydlsmsjury
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 65535 characters.'
                  example: 'Natus ex dicta hic inventore asperiores illum est.'
                  nullable: true
                impact:
                  type: string
                  description: ''
                  example: low
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                probability:
                  type: string
                  description: ''
                  example: low
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                mitigation_plan:
                  type: string
                  description: 'Must not be greater than 65535 characters.'
                  example: byickznkygloigmkwxphl
                  nullable: true
                status:
                  type: string
                  description: ''
                  example: open
                  nullable: false
                  enum:
                    - open
                    - mitigated
                    - closed
                assigned_to:
                  type: integer
                  description: ''
                  example: 17
                  nullable: true
              required:
                - project_id
                - title
                - impact
                - probability
                - status
    delete:
      summary: 'Remove the specified project risk (soft delete).'
      operationId: removeTheSpecifiedProjectRisksoftDelete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project risk.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-risks/search:
    post:
      summary: 'Advanced search for project risks.'
      operationId: advancedSearchForProjectRisks
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/filter/by-field:
    get:
      summary: 'Get project risks filtered by specific field.'
      operationId: getProjectRisksFilteredBySpecificField
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/filter/by-field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/filter/by-field could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/fields/values:
    get:
      summary: 'Get field values for dropdown filtering.'
      operationId: getFieldValuesForDropdownFiltering
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/fields/values could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/fields/values could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/fields/sortable:
    get:
      summary: 'Get sortable fields for project risks.'
      operationId: getSortableFieldsForProjectRisks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/fields/sortable could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/sort:
    post:
      summary: 'Sort project risks by specified field and direction.'
      operationId: sortProjectRisksBySpecifiedFieldAndDirection
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
  '/api/v1/project-risks/{id}/restore':
    post:
      summary: 'Restore a soft-deleted project risk.'
      operationId: restoreASoftDeletedProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project risk.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risks/{id}/force-delete':
    delete:
      summary: 'Permanently delete a project risk.'
      operationId: permanentlyDeleteAProjectRisk
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the project risk.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/project-risks/trashed/list:
    get:
      summary: 'Get trashed (soft-deleted) project risks.'
      operationId: getTrashedsoftDeletedProjectRisks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/trashed/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/trashed/list could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/projects/list:
    get:
      summary: 'Get projects for dropdown with bidirectional linking.'
      operationId: getProjectsForDropdownWithBidirectionalLinking
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/projects/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/projects/list could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/employees/list:
    get:
      summary: 'Get employees for dropdown.'
      operationId: getEmployeesForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/employees/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/employees/list could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/impact/options:
    get:
      summary: 'Get impact options for dropdown.'
      operationId: getImpactOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/impact/options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/impact/options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/probability/options:
    get:
      summary: 'Get probability options for dropdown.'
      operationId: getProbabilityOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/probability/options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/probability/options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/status/options:
    get:
      summary: 'Get status options for dropdown.'
      operationId: getStatusOptionsForDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/status/options could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/status/options could not be found.'
      tags:
        - 'Project Management / Risks'
  /api/v1/project-risks/statistics/summary:
    get:
      summary: 'Get project risk statistics and summary data.'
      operationId: getProjectRiskStatisticsAndSummaryData
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/statistics/summary could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/statistics/summary could not be found.'
      tags:
        - 'Project Management / Risks'
  '/api/v1/project-risks/project/{projectId}':
    get:
      summary: 'Get project risks by specific project.'
      operationId: getProjectRisksBySpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/project/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risks/status/{status}':
    get:
      summary: 'Get project risks by status.'
      operationId: getProjectRisksByStatus
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/status/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/status/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: status
        description: 'The status.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risks/impact/{impact}':
    get:
      summary: 'Get project risks by impact level.'
      operationId: getProjectRisksByImpactLevel
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/impact/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/impact/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: impact
        description: 'The impact.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/project-risks/probability/{probability}':
    get:
      summary: 'Get project risks by probability level.'
      operationId: getProjectRisksByProbabilityLevel
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/project-risks/probability/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/project-risks/probability/consequatur could not be found.'
      tags:
        - 'Project Management / Risks'
    parameters:
      -
        in: path
        name: probability
        description: 'The probability.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/tasks/{id}':
    get:
      summary: 'Display the specified task.'
      operationId: displayTheSpecifiedTask
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/consequatur could not be found.'
      tags:
        - 'Project Management / Tasks'
    put:
      summary: 'Update the specified task.'
      operationId: updateTheSpecifiedTask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the projects table.'
                  example: null
                  nullable: false
                task_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: vmqeopfuudtdsufvyvddq
                  nullable: false
                assigned_to:
                  type: string
                  description: 'The <code>id</code> of an existing record in the employees table.'
                  example: null
                  nullable: false
                due_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:38'
                  nullable: false
                status:
                  type: string
                  description: ''
                  example: done
                  nullable: false
                  enum:
                    - to_do
                    - in_progress
                    - done
                    - blocked
                milestone_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the project_milestones table.'
                  example: null
                  nullable: true
                title:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: amniihfqcoynlazghdtqt
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Dolores dolorum amet iste laborum eius est dolor.'
                  nullable: false
                notes:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                priority:
                  type: string
                  description: ''
                  example: high
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                    - urgent
                start_date:
                  type: string
                  description: 'Must be a valid date.'
                  example: '2025-09-16T10:25:38'
                  nullable: false
                estimated_hours:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 1000.'
                  example: 13
                  nullable: false
                actual_hours:
                  type: integer
                  description: 'Must be at least 0. Must not be greater than 1000.'
                  example: 16
                  nullable: false
                progress:
                  type: number
                  description: 'Must be at least 0. Must not be greater than 100.'
                  example: 5
                  nullable: false
                records:
                  type: array
                  description: 'Must be a valid URL. Must not be greater than 500 characters.'
                  example:
                    - opfuudtdsufvyvddqamni
                  items:
                    type: string
                    nullable: true
    delete:
      summary: 'Remove the specified task.'
      operationId: removeTheSpecifiedTask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the task.'
        example: consequatur
        required: true
        schema:
          type: string
  /api/v1/tasks/search/advanced:
    get:
      summary: 'Advanced search for tasks.'
      operationId: advancedSearchForTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/search/advanced could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/search/advanced could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/filter/field:
    get:
      summary: 'Get tasks filtered by specific field value (Dynamic Field Selection).'
      operationId: getTasksFilteredBySpecificFieldValueDynamicFieldSelection
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/filter/field could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/filter/field could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/my-tasks/list:
    get:
      summary: 'Get tasks assigned to the current user (My Tasks).'
      operationId: getTasksAssignedToTheCurrentUserMyTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/my-tasks/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/my-tasks/list could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/daily-due/list:
    get:
      summary: 'Get tasks due today (Daily Due Date).'
      operationId: getTasksDueTodayDailyDueDate
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/daily-due/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/daily-due/list could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/overdue/list:
    get:
      summary: 'Get overdue tasks (tasks past due date but not completed).'
      operationId: getOverdueTaskstasksPastDueDateButNotCompleted
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/overdue/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/overdue/list could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/fields/sortable:
    get:
      summary: 'Get sortable fields for tasks.'
      operationId: getSortableFieldsForTasks
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/fields/sortable could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/fields/sortable could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/sort:
    post:
      summary: 'Sort tasks by specified field and order.'
      operationId: sortTasksBySpecifiedFieldAndOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/employees/list:
    get:
      summary: 'Get employees for assignment dropdown.'
      operationId: getEmployeesForAssignmentDropdown
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/employees/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/employees/list could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/statuses/list:
    get:
      summary: 'Get task status options.'
      operationId: getTaskStatusOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/statuses/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/statuses/list could not be found.'
      tags:
        - 'Project Management / Tasks'
  /api/v1/tasks/priorities/list:
    get:
      summary: 'Get task priority options.'
      operationId: getTaskPriorityOptions
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/priorities/list could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/priorities/list could not be found.'
      tags:
        - 'Project Management / Tasks'
  '/api/v1/tasks/project/{projectId}':
    get:
      summary: 'Get tasks for a specific project.'
      operationId: getTasksForASpecificProject
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/project/consequatur could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/project/consequatur could not be found.'
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: projectId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/tasks/{taskId}/documents':
    post:
      summary: 'Upload document for a task.'
      operationId: uploadDocumentForATask
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
    get:
      summary: 'Get documents for a task.'
      operationId: getDocumentsForATask
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The route api/v1/tasks/consequatur/documents could not be found.'
                properties:
                  message:
                    type: string
                    example: 'The route api/v1/tasks/consequatur/documents could not be found.'
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: taskId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/v1/tasks/documents/{documentId}':
    delete:
      summary: 'Delete a task document.'
      operationId: deleteATaskDocument
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Project Management / Tasks'
    parameters:
      -
        in: path
        name: documentId
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
